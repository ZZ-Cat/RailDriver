#[
    This script header is a part of RailDriver.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/smartEntityManagement
@persist SemE2Locked [SemE2IsWeldedTo SemE2IsParentedTo SemE2]:entity

function number semInit()
{
    if (SemE2Locked) {
        return 0
    }

    SemE2Locked = 0
    SemE2 = entity()
    SemE2IsWeldedTo = SemE2:isWeldedTo()
    SemE2IsParentedTo = SemE2:parent()
    return 1
}

function number semE2IsLocked()
{
    return SemE2Locked
}
    }

    else
    {
        LockE2 = 1
    }

    E:propNotSolid(LockE2)
    E:propDraw(!LockE2)
    E:propShadow(!LockE2)
}

function number semSmartParentE2toLocoBody()
{
    local E = entity()

    if (!E:parent())
    {
        local W = E:isWeldedTo()
        if (W:isValid() == 0 | !W)
        {
            return 0
        }

        E:constraintBreak("weld", W)
        E:parentTo(W)
    }

    return 1
}

function array semFindTrucks()
{
    local E = entity()
    local P = E:parent()
    local CE = P:getConnectedEntities("axis")

    if (!CE[1, entity] | !CE[1, entity]:isValid())
    {
        return array()
    }

    else
    {
        CE:remove(1)
        if (CE:count() == 0)
        {
            return array()
        }

        else
        {
            local Ret = array()
            for (I = 1, CE:count())
            {
                if (P:toLocal(CE[I, entity]:pos()):x() < 0)
                {
                    Ret[1, entity] = CE[I, entity]
                }

                else
                {
                    Ret[2, entity] = CE[I, entity]
                }
            }

            return Ret
        }
    }
}
