#[
    This script header is a part of RailDriver.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/smartEntityManagement
@persist SemE2Locked [SemE2IsWeldedTo SemE2IsParentedTo SemE2]:entity

function number semInit()
{
    if (SemE2Locked) {
        return 0
    }

    SemE2Locked = 0
    SemE2 = entity()
    SemE2IsWeldedTo = SemE2:isWeldedTo()
    SemE2IsParentedTo = SemE2:parent()
    return 1
}

function number semE2IsLocked()
{
    return SemE2Locked
}

function number semUnlockE2()
{
    # Unlock the E2 so that it can be edited.
    if (isSinglePlayer())
    {
        # Singleplayer mode, no need to lock/unlock
        if (SemE2Locked)
        {
            SemE2Locked = 0
            return 1
        }
    }

    else
    {
        # Multiplayer mode, lock/unlock
        if (SemE2Locked)
        {
            # Already locked, unlock it.
            local E = entity()
            E:propNotSolid(0)
            E:propDraw(1)
            E:propShadow(1)
            SemE2Locked = 0
            return 1
        }
    }

    # Not locked, nothing to do.
    return 0
}

function number semLockE2()
{
    # Lock the E2 so that it cannot be edited.
    if (isSinglePlayer())
    {
        # Singleplayer mode, no need to lock/unlock
        if (!SemE2Locked)
        {
            SemE2Locked = 1
            return 1
        }
    }

    else
    {
        # Multiplayer mode, lock/unlock
        if (!SemE2Locked)
        {
            # Not locked, lock it.
            local E = entity()
            E:propNotSolid(1)
            E:propDraw(0)
            E:propShadow(0)
            SemE2Locked = 1
            return 1
        }
    }

    # Already locked, nothing to do.
    return 0
}

function number semParentToLocomotive()
{

    # Parent the E2 to the locomotive body.
    if (SemE2IsParentedTo)
    {
        # Already parented, nothing to do.
        return 1
    }

    # If E2 is not parented, first remove any existing welds.
    # Then, parent the E2 to the locomotive body.
    if (SemE2IsWeldedTo)
    {
        SemE2:constraintBreak("weld", SemE2IsWeldedTo)
    }

    SemE2:parentTo(SemE2IsWeldedTo)
    SemE2IsParentedTo = SemE2IsWeldedTo
    return 1
}

function number semSmartUnparentE2fromLocoBody()
{
    # Unparent the E2 from the locomotive body.
    if (!SemE2IsParentedTo)
    {
        # Not parented, nothing to do.
        return 1
    }

    # Replace the E2's parent with a weld.
    SemE2:deparent()
    weld(SemE2, SemE2IsParentedTo)
    SemE2IsWeldedTo = SemE2IsParentedTo
    SemE2IsParentedTo = noentity()
    return 1
}

function array semFindTrucks()
{
    local E = entity()
    local P = E:parent()
    local CE = P:getConnectedEntities("axis")

    if (!CE[1, entity] | !CE[1, entity]:isValid())
    {
        return array()
    }

    else
    {
        CE:remove(1)
        if (CE:count() == 0)
        {
            return array()
        }

        else
        {
            local Ret = array()
            for (I = 1, CE:count())
            {
                if (P:toLocal(CE[I, entity]:pos()):x() < 0)
                {
                    Ret[1, entity] = CE[I, entity]
                }

                else
                {
                    Ret[2, entity] = CE[I, entity]
                }
            }

            return Ret
        }
    }
}

function number semValidateTrucks(Trucks:array)
{
    if (Trucks:count() != 2)
    {
        return 0
    }

    if (!Trucks[1, entity]:isValid() | !Trucks[1, entity]:isValidPhysics())
    {
        return 0
    }

    if (!Trucks[2, entity]:isValid() | !Trucks[2, entity]:isValidPhysics())
    {
        return 0
    }

    return 1
}
