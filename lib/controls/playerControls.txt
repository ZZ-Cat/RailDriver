#[
    This script header is a part of the RailDriver project.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/controls/playerControls
@persist PCDirection PCThrottle PCBrake PCEmergencyBrake PCHorn PCHeadlights PCDitchLights
@persist PCTrainDriver:entity

function table encodeKeyboardControls(KeyboardControls:table)
{
    local ControlTable = table()
    foreach(K, V:string = KeyboardControls)
    {
        V:lower()
        if (K == "Increase Reverser")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Increase Direction Modifier", string] = "lshift"
                ControlTable["Increase Direction Key", string] = V:sub(13):trim():upper()
                ControlTable["Increase Direction has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Increase Direction Modifier", string] = "rshift"
                ControlTable["Increase Direction Key", string] = V:sub(14):trim():upper()
                ControlTable["Increase Direction has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Increase Direction Modifier", string] = "lcontrol"
                ControlTable["Increase Direction Key", string] = V:sub(12):trim():upper()
                ControlTable["Increase Direction has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Increase Direction Modifier", string] = "rcontrol"
                ControlTable["Increase Direction Key", string] = V:sub(13):trim():upper()
                ControlTable["Increase Direction has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Increase Direction Modifier", string] = "lalt"
                ControlTable["Increase Direction Key", string] = V:sub(11):trim():upper()
                ControlTable["Increase Direction has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Increase Direction Modifier", string] = "ralt"
                ControlTable["Increase Direction Key", string] = V:sub(12):trim():upper()
                ControlTable["Increase Direction has Modifier", number] = 1
            }

            else
            {
                ControlTable["Increase Direction Modifier", string] = ""
                ControlTable["Increase Direction Key", string] = V:trim():upper()
                ControlTable["Increase Direction has Modifier", number] = 0
            }
        }

        if (K == "Decrease Reverser")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Decrease Direction Modifier", string] = "lshift"
                ControlTable["Decrease Direction Key", string] = V:sub(13):trim():upper()
                ControlTable["Decrease Direction has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Decrease Direction Modifier", string] = "rshift"
                ControlTable["Decrease Direction Key", string] = V:sub(14):trim():upper()
                ControlTable["Decrease Direction has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Decrease Direction Modifier", string] = "lcontrol"
                ControlTable["Decrease Direction Key", string] = V:sub(12):trim():upper()
                ControlTable["Decrease Direction has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Decrease Direction Modifier", string] = "rcontrol"
                ControlTable["Decrease Direction Key", string] = V:sub(13):trim():upper()
                ControlTable["Decrease Direction has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Decrease Direction Modifier", string] = "lalt"
                ControlTable["Decrease Direction Key", string] = V:sub(11):trim():upper()
                ControlTable["Decrease Direction has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Decrease Direction Modifier", string] = "ralt"
                ControlTable["Decrease Direction Key", string] = V:sub(12):trim():upper()
                ControlTable["Decrease Direction has Modifier", number] = 1
            }

            else
            {
                ControlTable["Decrease Direction Modifier", string] = ""
                ControlTable["Decrease Direction Key", string] = V:trim():upper()
                ControlTable["Decrease Direction has Modifier", number] = 0
            }
        }

        if (K == "Increase Throttle")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Increase Throttle Modifier", string] = "lshift"
                ControlTable["Increase Throttle Key", string] = V:sub(13):trim():upper()
                ControlTable["Increase Throttle has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Increase Throttle Modifier", string] = "rshift"
                ControlTable["Increase Throttle Key", string] = V:sub(14):trim():upper()
                ControlTable["Increase Throttle has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Increase Throttle Modifier", string] = "lcontrol"
                ControlTable["Increase Throttle Key", string] = V:sub(12):trim():upper()
                ControlTable["Increase Throttle has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Increase Throttle Modifier", string] = "rcontrol"
                ControlTable["Increase Throttle Key", string] = V:sub(13):trim():upper()
                ControlTable["Increase Throttle has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Increase Throttle Modifier", string] = "lalt"
                ControlTable["Increase Throttle Key", string] = V:sub(11):trim():upper()
                ControlTable["Increase Throttle has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Increase Throttle Modifier", string] = "ralt"
                ControlTable["Increase Throttle Key", string] = V:sub(12):trim():upper()
                ControlTable["Increase Throttle has Modifier", number] = 1
            }

            else
            {
                ControlTable["Increase Throttle Modifier", string] = ""
                ControlTable["Increase Throttle Key", string] = V:trim():upper()
                ControlTable["Increase Throttle has Modifier", number] = 0
            }
        }

        if (K == "Decrease Throttle")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Decrease Throttle Modifier", string] = "lshift"
                ControlTable["Decrease Throttle Key", string] = V:sub(13):trim():upper()
                ControlTable["Decrease Throttle has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Decrease Throttle Modifier", string] = "rshift"
                ControlTable["Decrease Throttle Key", string] = V:sub(14):trim():upper()
                ControlTable["Decrease Throttle has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Decrease Throttle Modifier", string] = "lcontrol"
                ControlTable["Decrease Throttle Key", string] = V:sub(12):trim():upper()
                ControlTable["Decrease Throttle has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Decrease Throttle Modifier", string] = "rcontrol"
                ControlTable["Decrease Throttle Key", string] = V:sub(13):trim():upper()
                ControlTable["Decrease Throttle has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Decrease Throttle Modifier", string] = "lalt"
                ControlTable["Decrease Throttle Key", string] = V:sub(11):trim():upper()
                ControlTable["Decrease Throttle has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Decrease Throttle Modifier", string] = "ralt"
                ControlTable["Decrease Throttle Key", string] = V:sub(12):trim():upper()
                ControlTable["Decrease Throttle has Modifier", number] = 1
            }

            else
            {
                ControlTable["Decrease Throttle Modifier", string] = ""
                ControlTable["Decrease Throttle Key", string] = V:trim():upper()
                ControlTable["Decrease Throttle has Modifier", number] = 0
            }
        }

        if (K == "Increase Brake")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Increase Brake Modifier", string] = "lshift"
                ControlTable["Increase Brake Key", string] = V:sub(13):trim():upper()
                ControlTable["Increase Brake has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Increase Brake Modifier", string] = "rshift"
                ControlTable["Increase Brake Key", string] = V:sub(14):trim():upper()
                ControlTable["Increase Brake has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Increase Brake Modifier", string] = "lcontrol"
                ControlTable["Increase Brake Key", string] = V:sub(12):trim():upper()
                ControlTable["Increase Brake has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Increase Brake Modifier", string] = "rcontrol"
                ControlTable["Increase Brake Key", string] = V:sub(13):trim():upper()
                ControlTable["Increase Brake has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Increase Brake Modifier", string] = "lalt"
                ControlTable["Increase Brake Key", string] = V:sub(11):trim():upper()
                ControlTable["Increase Brake has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Increase Brake Modifier", string] = "ralt"
                ControlTable["Increase Brake Key", string] = V:sub(12):trim():upper()
                ControlTable["Increase Brake has Modifier", number] = 1
            }

            else
            {
                ControlTable["Increase Brake Modifier", string] = ""
                ControlTable["Increase Brake Key", string] = V:trim():upper()
                ControlTable["Increase Brake has Modifier", number] = 0
            }
        }

        if (K == "Decrease Brake")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Decrease Brake Modifier", string] = "lshift"
                ControlTable["Decrease Brake Key", string] = V:sub(13):trim():upper()
                ControlTable["Decrease Brake has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Decrease Brake Modifier", string] = "rshift"
                ControlTable["Decrease Brake Key", string] = V:sub(14):trim():upper()
                ControlTable["Decrease Brake has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Decrease Brake Modifier", string] = "lcontrol"
                ControlTable["Decrease Brake Key", string] = V:sub(12):trim():upper()
                ControlTable["Decrease Brake has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Decrease Brake Modifier", string] = "rcontrol"
                ControlTable["Decrease Brake Key", string] = V:sub(13):trim():upper()
                ControlTable["Decrease Brake has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Decrease Brake Modifier", string] = "lalt"
                ControlTable["Decrease Brake Key", string] = V:sub(11):trim():upper()
                ControlTable["Decrease Brake has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Decrease Brake Modifier", string] = "ralt"
                ControlTable["Decrease Brake Key", string] = V:sub(12):trim():upper()
                ControlTable["Decrease Brake has Modifier", number] = 1
            }

            else
            {
                ControlTable["Decrease Brake Modifier", string] = ""
                ControlTable["Decrease Brake Key", string] = V:trim():upper()
                ControlTable["Decrease Brake has Modifier", number] = 0
            }
        }

        if (K == "Emergency Brake")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Emergency Brake Modifier", string] = "lshift"
                ControlTable["Emergency Brake Key", string] = V:sub(13):trim():upper()
                ControlTable["Emergency Brake has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Emergency Brake Modifier", string] = "rshift"
                ControlTable["Emergency Brake Key", string] = V:sub(14):trim():upper()
                ControlTable["Emergency Brake has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Emergency Brake Modifier", string] = "lcontrol"
                ControlTable["Emergency Brake Key", string] = V:sub(12):trim():upper()
                ControlTable["Emergency Brake has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Emergency Brake Modifier", string] = "rcontrol"
                ControlTable["Emergency Brake Key", string] = V:sub(13):trim():upper()
                ControlTable["Emergency Brake has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Emergency Brake Modifier", string] = "lalt"
                ControlTable["Emergency Brake Key", string] = V:sub(11):trim():upper()
                ControlTable["Emergency Brake has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Emergency Brake Modifier", string] = "ralt"
                ControlTable["Emergency Brake Key", string] = V:sub(12):trim():upper()
                ControlTable["Emergency Brake has Modifier", number] = 1
            }

            else
            {
                ControlTable["Emergency Brake Modifier", string] = ""
                ControlTable["Emergency Brake Key", string] = V:trim():upper()
                ControlTable["Emergency Brake has Modifier", number] = 0
            }
        }

        if (K == "Horn")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Horn Modifier", string] = "lshift"
                ControlTable["Horn Key", string] = V:sub(13):trim():upper()
                ControlTable["Horn has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Horn Modifier", string] = "rshift"
                ControlTable["Horn Key", string] = V:sub(14):trim():upper()
                ControlTable["Horn has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Horn Modifier", string] = "lcontrol"
                ControlTable["Horn Key", string] = V:sub(12):trim():upper()
                ControlTable["Horn has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Horn Modifier", string] = "rcontrol"
                ControlTable["Horn Key", string] = V:sub(13):trim():upper()
                ControlTable["Horn has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Horn Modifier", string] = "lalt"
                ControlTable["Horn Key", string] = V:sub(11):trim():upper()
                ControlTable["Horn has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Horn Modifier", string] = "ralt"
                ControlTable["Horn Key", string] = V:sub(12):trim():upper()
                ControlTable["Horn has Modifier", number] = 1
            }

            else
            {
                ControlTable["Horn Modifier", string] = ""
                ControlTable["Horn Key", string] = V:trim():upper()
                ControlTable["Horn has Modifier", number] = 0
            }
        }

        if (K == "Bell")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Bell Modifier", string] = "lshift"
                ControlTable["Bell Key", string] = V:sub(13):trim():upper()
                ControlTable["Bell has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Bell Modifier", string] = "rshift"
                ControlTable["Bell Key", string] = V:sub(14):trim():upper()
                ControlTable["Bell has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Bell Modifier", string] = "lcontrol"
                ControlTable["Bell Key", string] = V:sub(12):trim():upper()
                ControlTable["Bell has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Bell Modifier", string] = "rcontrol"
                ControlTable["Bell Key", string] = V:sub(13):trim():upper()
                ControlTable["Bell has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Bell Modifier", string] = "lalt"
                ControlTable["Bell Key", string] = V:sub(11):trim():upper()
                ControlTable["Bell has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Bell Modifier", string] = "ralt"
                ControlTable["Bell Key", string] = V:sub(12):trim():upper()
                ControlTable["Bell has Modifier", number] = 1
            }

            else
            {
                ControlTable["Bell Modifier", string] = ""
                ControlTable["Bell Key", string] = V:trim():upper()
                ControlTable["Bell has Modifier", number] = 0
            }
        }

        if (K == "Headlights")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Headlights Modifier", string] = "lshift"
                ControlTable["Headlights Key", string] = V:sub(13):trim():upper()
                ControlTable["Headlights has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Headlights Modifier", string] = "rshift"
                ControlTable["Headlights Key", string] = V:sub(14):trim():upper()
                ControlTable["Headlights has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Headlights Modifier", string] = "lcontrol"
                ControlTable["Headlights Key", string] = V:sub(12):trim():upper()
                ControlTable["Headlights has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Headlights Modifier", string] = "rcontrol"
                ControlTable["Headlights Key", string] = V:sub(13):trim():upper()
                ControlTable["Headlights has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Headlights Modifier", string] = "lalt"
                ControlTable["Headlights Key", string] = V:sub(11):trim():upper()
                ControlTable["Headlights has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Headlights Modifier", string] = "ralt"
                ControlTable["Headlights Key", string] = V:sub(12):trim():upper()
                ControlTable["Headlights has Modifier", number] = 1
            }

            else
            {
                ControlTable["Headlights Modifier", string] = ""
                ControlTable["Headlights Key", string] = V:trim():upper()
                ControlTable["Headlights has Modifier", number] = 0
            }
        }

        if (K == "Ditch Lights")
        {
            if (V:find("left shift + "))
            {
                ControlTable["Ditch Lights Modifier", string] = "lshift"
                ControlTable["Ditch Lights Key", string] = V:sub(13):trim():upper()
                ControlTable["Ditch Lights has Modifier", number] = 1
            }

            elseif (V:find("right shift + "))
            {
                ControlTable["Ditch Lights Modifier", string] = "rshift"
                ControlTable["Ditch Lights Key", string] = V:sub(14):trim():upper()
                ControlTable["Ditch Lights has Modifier", number] = 1
            }

            elseif (V:find("left ctrl + "))
            {
                ControlTable["Ditch Lights Modifier", string] = "lcontrol"
                ControlTable["Ditch Lights Key", string] = V:sub(12):trim():upper()
                ControlTable["Ditch Lights has Modifier", number] = 1
            }

            elseif (V:find("right ctrl + "))
            {
                ControlTable["Ditch Lights Modifier", string] = "rcontrol"
                ControlTable["Ditch Lights Key", string] = V:sub(13):trim():upper()
                ControlTable["Ditch Lights has Modifier", number] = 1
            }

            elseif (V:find("left alt + "))
            {
                ControlTable["Ditch Lights Modifier", string] = "lalt"
                ControlTable["Ditch Lights Key", string] = V:sub(11):trim():upper()
                ControlTable["Ditch Lights has Modifier", number] = 1
            }

            elseif (V:find("right alt + "))
            {
                ControlTable["Ditch Lights Modifier", string] = "ralt"
                ControlTable["Ditch Lights Key", string] = V:sub(12):trim():upper()
                ControlTable["Ditch Lights has Modifier", number] = 1
            }

            else
            {
                ControlTable["Ditch Lights Modifier", string] = ""
                ControlTable["Ditch Lights Key", string] = V:trim():upper()
                ControlTable["Ditch Lights has Modifier", number] = 0
            }
        }
    }

    return ControlTable
}

# This function initializes the player controls.
# This function should be called once per player.
function table playerControlsInit(KeyboardControls:table, ThrottleMap:table, BrakeMap:table, TrainDriver:entity)
{
    local Controls = table()
    Controls["Direction", number] = 0
    Controls["Throttle", number] = 1
    Controls["Brake", number] = 1
    Controls["Emergency Brake", number] = 0
    Controls["Horn", number] = 0
    Controls["Bell", number] = 0
    Controls["Headlights", number] = 0
    Controls["Ditch Lights", number] = 0
    Controls["TrainDriver", entity] = TrainDriver
    Controls["Controls", table] = encodeKeyboardControls(KeyboardControls)
    Controls["Key Bindings", table] = KeyboardControls

    # 'table:toArray()' is bugged, so I am directly using the throttle and brake maps.
    Controls["Throttle Map", table] = ThrottleMap
    Controls["Brake Map", table] = BrakeMap

    # Last known valid direction, throttle, and brake values.
    Controls["Last Valid Direction", number] = 0
    Controls["Last Valid Throttle", number] = 0
    Controls["Last Valid Brake", number] = 0
    Controls["Last Valid Emergency Brake", number] = 0
    Controls["Last Valid Horn", number] = 0
    Controls["Last Valid Bell", number] = 0
    Controls["Last Valid Headlights", number] = 0
    Controls["Last Valid Ditch Lights", number] = 0

    # Fault Reporting for the player controls.
    Controls["Faults", table] = table()
    Controls["Faults", table]["Direction", number] = 0
    Controls["Faults", table]["Throttle", number] = 0
    Controls["Faults", table]["Brake", number] = 0
    Controls["Faults", table]["Emergency Brake", number] = 0
    Controls["Faults", table]["Horn", number] = 0
    Controls["Faults", table]["Bell", number] = 0
    Controls["Faults", table]["Headlights", number] = 0
    Controls["Faults", table]["Ditch Lights", number] = 0
    Controls["Faults", table]["Player Controls", number] = 0
    Controls["Faults", table]["Message", string] = ""

    # Flags for the player controls.
    Controls["Flags", table] = table()
    Controls["Flags", table]["Direction is Updated", number] = 0
    Controls["Flags", table]["Throttle is Updated", number] = 0
    Controls["Flags", table]["Brake is Updated", number] = 0
    Controls["Flags", table]["Emergency Brake is Updated", number] = 0
    Controls["Flags", table]["Emergency Brake is Released", number] = 1
    Controls["Flags", table]["Horn is Updated", number] = 0
    Controls["Flags", table]["Bell is Updated", number] = 0
    Controls["Flags", table]["Headlights is Updated", number] = 0
    Controls["Flags", table]["Ditch Lights is Updated", number] = 0
    Controls["Flags", table]["Player Controls Updated", number] = 0

    runOnKeys(Controls["TrainDriver", entity], 1)
    return Controls
}

# This function updates the player controls.
# This function should be called every key clock tick.
function number playerControlsUpdate(Controls:table)
{
    local KeyboardControls = Controls["Controls", table]
    local Driver = Controls["TrainDriver", entity]

    local LeftModifierKeyPressed = bXor(Driver:keyPressed("lshift"), bXor(Driver:keyPressed("lcontrol"), Driver:keyPressed("lalt")))
    local RightModifierKeyPressed = bXor(Driver:keyPressed("rshift"), bXor(Driver:keyPressed("rcontrol"), Driver:keyPressed("ralt")))
    local ModifierKeyPressed = bXor(LeftModifierKeyPressed, RightModifierKeyPressed)

    # I couldn't find a better way of doing this.
    local IncreaseDirection = Driver:keyPressed(KeyboardControls["Increase Direction Key", string]) & (KeyboardControls["Increase Direction has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Increase Direction Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local DecreaseDirection = Driver:keyPressed(KeyboardControls["Decrease Direction Key", string]) & (KeyboardControls["Decrease Direction has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Decrease Direction Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local IncreaseThrottle = Driver:keyPressed(KeyboardControls["Increase Throttle Key", string]) & (KeyboardControls["Increase Throttle has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Increase Throttle Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local DecreaseThrottle = Driver:keyPressed(KeyboardControls["Decrease Throttle Key", string]) & (KeyboardControls["Decrease Throttle has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Decrease Throttle Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local IncreaseBrake = Driver:keyPressed(KeyboardControls["Increase Brake Key", string]) & (KeyboardControls["Increase Brake has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Increase Brake Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local DecreaseBrake = Driver:keyPressed(KeyboardControls["Decrease Brake Key", string]) & (KeyboardControls["Decrease Brake has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Decrease Brake Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local EmergencyBrake = Driver:keyPressed(KeyboardControls["Emergency Brake Key", string]) & (KeyboardControls["Emergency Brake has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Emergency Brake Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local Horn = Driver:keyPressed(KeyboardControls["Horn Key", string]) & (KeyboardControls["Horn has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Horn Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local Bell = Driver:keyPressed(KeyboardControls["Bell Key", string]) & (KeyboardControls["Bell has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Bell Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local Headlights = Driver:keyPressed(KeyboardControls["Headlights Key", string]) & (KeyboardControls["Headlights has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Headlights Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)
    local DitchLights = Driver:keyPressed(KeyboardControls["Ditch Lights Key", string]) & (KeyboardControls["Ditch Lights has Modifier", number] ? (Driver:keyPressed(KeyboardControls["Ditch Lights Modifier", string]) & ModifierKeyPressed) : !ModifierKeyPressed)

    # Update the direction.
    if (IncreaseDirection & !DecreaseDirection)
    {
        if (Controls["Flags", table]["Player Controls Updated", number] == 0)
        {
            if (Controls["Flags", table]["Direction is Updated", number] == 0)
            {
                Controls["Direction", number] = Controls["Direction", number] + 1
                Controls["Flags", table]["Direction is Updated", number] = 1
                Controls["Flags", table]["Player Controls Updated", number] = 1
            }
        }
    }
    elseif (DecreaseDirection & !IncreaseDirection)
    {
        if (Controls["Flags", table]["Player Controls Updated", number] == 0)
        {
            if (Controls["Flags", table]["Direction is Updated", number] == 0)
            {
                Controls["Direction", number] = Controls["Direction", number] - 1
                Controls["Flags", table]["Direction is Updated", number] = 1
                Controls["Flags", table]["Player Controls Updated", number] = 1
            }
        }
    }

    # Update the throttle.
    elseif (IncreaseThrottle & !DecreaseThrottle)
    {
        if (Controls["Flags", table]["Player Controls Updated", number] == 0)
        {
            if (Controls["Flags", table]["Throttle is Updated", number] == 0)
            {
                Controls["Throttle", number] = Controls["Throttle", number] + 1
                Controls["Flags", table]["Throttle is Updated", number] = 1
                Controls["Flags", table]["Player Controls Updated", number] = 1
            }
        }
    }
    elseif (DecreaseThrottle & !IncreaseThrottle)
    {
        if (Controls["Flags", table]["Player Controls Updated", number] == 0)
        {
            if (Controls["Flags", table]["Throttle is Updated", number] == 0)
            {
                Controls["Throttle", number] = Controls["Throttle", number] - 1
                Controls["Flags", table]["Throttle is Updated", number] = 1
                Controls["Flags", table]["Player Controls Updated", number] = 1
            }
        }
    }

    # Update the brake.
    elseif (IncreaseBrake & !DecreaseBrake)
    {
        if (Controls["Flags", table]["Player Controls Updated", number] == 0)
        {
            if (Controls["Flags", table]["Brake is Updated", number] == 0)
            {
                Controls["Brake", number] = Controls["Brake", number] + 1
                Controls["Flags", table]["Brake is Updated", number] = 1
                Controls["Flags", table]["Player Controls Updated", number] = 1
            }
        }
    }
    elseif (DecreaseBrake & !IncreaseBrake)
    {
        if (Controls["Flags", table]["Player Controls Updated", number] == 0)
        {
            if (Controls["Flags", table]["Brake is Updated", number] == 0)
            {
                Controls["Brake", number] = Controls["Brake", number] - 1
                Controls["Flags", table]["Brake is Updated", number] = 1
                Controls["Flags", table]["Player Controls Updated", number] = 1
            }
        }
    }

    # Update the emergency brake.
    elseif (EmergencyBrake)
    {
        if (Controls["Flags", table]["Player Controls Updated", number] == 0)
        {
            if (Controls["Flags", table]["Emergency Brake is Updated", number] == 0)
            {
                Controls["Emergency Brake", number] = 1
                Controls["Flags", table]["Emergency Brake is Updated", number] = 1
                Controls["Flags", table]["Player Controls Updated", number] = 1
            }
        }
    }

    # Clamp the direction.
    Controls["Direction", number] = clamp(Controls["Direction", number], -1, 1)

    # Clamp the throttle.
    Controls["Throttle", number] = clamp(Controls["Throttle", number], 1, Controls["Throttle Map", table]["Velocity Setpoint", array]:count())

    # Clamp the brake.
    Controls["Brake", number] = clamp(Controls["Brake", number], 1, Controls["Brake Map", table]["Velocity Setpoint", array]:count())

    return Controls["Flags", table]["Player Controls Updated", number]
}

# This function returns true if the direction has been updated.
function number playerControlsDirectionIsUpdated(Controls:table)
{
    return Controls["Flags", table]["Direction is Updated", number] == 1 ? 1 : 0
}

# This function returns true if the throttle has been updated.
function number playerControlsThrottleIsUpdated(Controls:table)
{
    return Controls["Flags", table]["Throttle is Updated", number] == 1 ? 1 : 0
}

# This function returns true if the brake is updated.
function number playerControlsBrakeIsUpdated(Controls:table)
{
    return Controls["Flags", table]["Brake is Updated", number] == 1 ? 1 : 0
}

# This function returns true if the emergency brake is updated.
function number playerControlsEmergencyBrakeIsUpdated(Controls:table)
{
    return Controls["Flags", table]["Emergency Brake is Updated", number] == 1 ? 1 : 0
}

# This function returns true if the Emergency Brake is active.
function number playerControlsEmergencyBrakeIsActive(Controls:table)
{
    return Controls["Flags", table]["Emergency Brake is Released", number] != 1 ? 1 : 0
}

# This function clears the Direction is Updated flag.
function void playerControlsClearDirectionIsUpdated(Controls:table)
{
    Controls["Flags", table]["Direction is Updated", number] = 0
}

# This function clears the Throttle is Updated flag.
function void playerControlsClearThrottleIsUpdated(Controls:table)
{
    Controls["Flags", table]["Throttle is Updated", number] = 0
}

# This function clears the Brake is Updated flag.
function void playerControlsClearBrakeIsUpdated(Controls:table)
{
    Controls["Flags", table]["Brake is Updated", number] = 0
}

# This function clears the Emergency Brake is Updated flag.
function void playerControlsClearEmergencyBrakeIsUpdated(Controls:table)
{
    Controls["Flags", table]["Emergency Brake is Updated", number] = 0
}

# This function clears the Emergency Brake is Released flag.
function void playerControlsClearEmergencyBrakeIsActive(Controls:table)
{
    Controls["Flags", table]["Emergency Brake is Released", number] = 1
}

# This function resets the Throttle.
function void playerControlsResetThrottle(Controls:table)
{
    Controls["Throttle", number] = 1
    Controls["Last Valid Throttle", number] = 1
}

# This function returns the direction of the locomotive.
function number playerControlsGetDirection(Controls:table)
{
    return Controls["Direction", number]
}

# This function returns the throttle of the locomotive.
function number playerControlsGetThrottle(Controls:table)
{
    return Controls["Throttle", number]
}

# This function returns the brake of the locomotive.
function number playerControlsGetBrake(Controls:table)
{
    return Controls["Brake", number]
}

# This function returns the emergency brake of the locomotive.
function number playerControlsGetEmergencyBrake(Controls:table)
{
    return Controls["Emergency Brake", number]
}

# This function returns the horn of the locomotive.
function number playerControlsGetHorn(Controls:table)
{
    return Controls["Horn", number]
}

# This function returns the bell of the locomotive.
function number playerControlsGetBell(Controls:table)
{
    return Controls["Bell", number]
}

# This function returns the headlights of the locomotive.
function number playerControlsGetHeadlights(Controls:table)
{
    return Controls["Headlights", number]
}

# This function returns the ditch lights of the locomotive.
function number playerControlsGetDitchLights(Controls:table)
{
    return Controls["Ditch Lights", number]
}

# This function returns the throttle map.
function number playerControlsGetThrottleMap(Controls:table, ThrottleInputType:string, ThrottleIndex:number)
{
    return Controls["Throttle Map", table][ThrottleInputType, array][ThrottleIndex, number]
}

# This function returns the brake map.
function number playerControlsGetBrakeMap(Controls:table, BrakeInputType:string, BrakeIndex:number)
{
    return Controls["Brake Map", table][BrakeInputType, array][BrakeIndex, number]
}

# This function manually sets the Emergency Brake to active.
function void playerControlsSetEmergencyBrakeActive(Controls:table)
{
    Controls["Flags", table]["Emergency Brake is Released", number] = 0
}

# This function checks whether or not the player controls are valid.
function number playerControlsValid(Controls:table, Speed)
{

    # Player Controls Updated flag should already be set to 1.
    # If it is not, then the player controls are invalid.
    if (Controls["Flags", table]["Player Controls Updated", number] != 1)
    {
        # Clear any flags that may have been set.
        Controls["Flags", table]["Direction is Updated", number] = 0
        Controls["Flags", table]["Throttle is Updated", number] = 0
        Controls["Flags", table]["Brake is Updated", number] = 0
        Controls["Flags", table]["Emergency Brake is Updated", number] = 0
        Controls["Flags", table]["Horn is Updated", number] = 0
        Controls["Flags", table]["Bell is Updated", number] = 0
        Controls["Flags", table]["Headlights is Updated", number] = 0
        Controls["Flags", table]["Ditch Lights is Updated", number] = 0
        Controls["Flags", table]["Player Controls Updated", number] = 0

        # Set Player Controls Fault.
        Controls["Faults", table]["Player Controls", number] = 1
        Controls["Faults", table]["Message", string] = "Player Controls are invalid."

        # Return false.
        return 0
    }

    #[
        This section of code fixes #18.
    ]#
    # Direction Fault.
    if (Controls["Faults", table]["Direction", number] != 0)
    {
        # Check if the Direction is Updated.
        if (Controls["Flags", table]["Direction is Updated", number] == 1)
        {
            # The Direction needs to be equal to its Last Valid Direction before the fault is cleared.
            if (Controls["Direction", number] == Controls["Last Valid Direction", number])
            {
                # Clear the Direction Fault.
                Controls["Faults", table]["Direction", number] = 0
                Controls["Faults", table]["Message", string] = "Direction Fault Cleared."

                # Clear the Direction is Updated & Player Controls Updated flags.
                Controls["Flags", table]["Direction is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Return false.
                return 0
            }
            
            else
            {
                # Advise the player that they need to set the Direction to its Last Valid Direction, whether it be Forward, Neutral or Reverse.
                local LastValidDirection = Controls["Last Valid Direction", number] == 1 ? "Forward" : Controls["Last Valid Direction", number] == -1 ? "Reverse" : "Neutral"
                Controls["Faults", table]["Message", string] = "Direction Fault: Direction needs to be set to " + Controls["Last Valid Direction", number] + "."

                # Clear the Direction is Updated & Player Controls Updated flags.
                Controls["Flags", table]["Direction is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Return false.
                return 0
            }
        }

        # Check if the Throttle is Updated.
        elseif (Controls["Flags", table]["Throttle is Updated", number] == 1)
        {
            # Advise the player that the Throttle cannot be updated.
            Controls["Faults", table]["Message", string] = "Direction Fault: Throttle cannot be updated."

            # Clear the Throttle is Updated & Player Controls Updated flags.
            Controls["Flags", table]["Throttle is Updated", number] = 0
            Controls["Flags", table]["Player Controls Updated", number] = 0

            # Return false.
            return 0
        }
    }

    # Throttle Fault.
    elseif (Controls["Faults", table]["Throttle", number] != 0)
    {
        # Check if the Throttle is Updated.
        if (Controls["Flags", table]["Throttle is Updated", number] == 1)
        {
            # The Throttle needs to be equal to its Last Valid Throttle before the fault is cleared.
            if (Controls["Throttle", number] == Controls["Last Valid Throttle", number])
            {
                # Clear the Throttle Fault.
                Controls["Faults", table]["Throttle", number] = 0
                Controls["Faults", table]["Message", string] = "Throttle Fault Cleared."

                # Clear the Throttle is Updated & Player Controls Updated flags.
                Controls["Flags", table]["Throttle is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Return false.
                return 0
            }
            
            else
            {
                # Advise the player that they need to set the Throttle to its Last Valid Throttle.
                Controls["Faults", table]["Message", string] = "Throttle Fault: Throttle needs to be set to Notch " + Controls["Last Valid Throttle", number] + "."

                # Clear the Throttle is Updated & Player Controls Updated flags.
                Controls["Flags", table]["Throttle is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Return false.
                return 0
            }
        }

        # Check if the Direction is Updated.
        elseif (Controls["Flags", table]["Direction is Updated", number] == 1)
        {
            # Advise the player that the Direction cannot be updated.
            Controls["Faults", table]["Message", string] = "Throttle Fault: Direction cannot be updated."

            # Clear the Direction is Updated & Player Controls Updated flags.
            Controls["Flags", table]["Direction is Updated", number] = 0
            Controls["Flags", table]["Player Controls Updated", number] = 0

            # Return false.
            return 0
        }
    }

    #[
        Notes from ZZ Cat:
        These are placeholders.
        When I get around to implementing the Brake Map, I will add the appropriate fault checks & fault recovery.

        # Brake Fault.
        elseif (Controls["Faults", table]["Brake", number] != 0)
        {
            # Return false.
            return 0
        }

        # Emergency Brake Fault.
        elseif (Controls["Faults", table]["Emergency Brake", number] != 0)
        {
            # Return false.
            return 0
        }
    ]#

    # No faults were triggered.
    else
    {
        # Check if the Direction is Updated.
        if (Controls["Flags", table]["Direction is Updated", number] == 1)
        {
            # An attempt to change the direction was made.

            # Check if the Emergency Brake is active.
            if (Controls["Flags", table]["Emergency Brake is Released", number] != 1)
            {
                # The Emergency Brake is active.

                # Clear the Direction is Updated flag.
                Controls["Flags", table]["Direction is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Set Direction Fault.
                Controls["Faults", table]["Direction", number] = 1
                Controls["Faults", table]["Message", string] = "Direction cannot be changed while the Emergency Brake is active."

                # Return false.
                return 0
            }

            # Check if the locomotive is moving.
            elseif (Speed != 0)
            {
                # The locomotive is moving.

                # Clear the Direction is Updated flag.
                Controls["Flags", table]["Direction is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Set Direction Fault.
                Controls["Faults", table]["Direction", number] = 1
                Controls["Faults", table]["Message", string] = "Direction cannot be changed while the locomotive is moving."

                # Return false.
                return 0
            }

            # Check if the Throttle is not at Idle.
            elseif (Controls["Throttle", number] != 1)
            {
                # The Throttle is not at Idle.

                # Clear the Direction is Updated flag.
                Controls["Flags", table]["Direction is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Set Direction Fault.
                Controls["Faults", table]["Direction", number] = 1
                Controls["Faults", table]["Message", string] = "Direction cannot be changed while the Throttle is not at Idle."

                # Return false.
                return 0
            }

            # Direction is valid.
            else
            {
                # Clear the Direction is Updated flag.
                #Controls["Flags", table]["Direction is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Set the Last Valid Direction.
                Controls["Last Valid Direction", number] = Controls["Direction", number]

                # Return true.
                return 1
            }
        }

        # Check if the Throttle is Updated.
        elseif (Controls["Flags", table]["Throttle is Updated", number] == 1)
        {
            # An attempt to change the Throttle was made.

            # Check if the Emergency Brake is active.
            if (Controls["Flags", table]["Emergency Brake is Released", number] != 1)
            {
                # The Emergency Brake is active.

                # Clear the Throttle is Updated flag.
                Controls["Flags", table]["Throttle is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Set Throttle Fault.
                Controls["Faults", table]["Throttle", number] = 1
                Controls["Faults", table]["Message", string] = "Throttle cannot be changed while the Emergency Brake is active."

                # Return false.
                return 0
            }

            # Check if the Direction is set to Neutral.
            elseif (Controls["Direction", number] == 0)
            {
                # The Direction is set to Neutral.

                # Clear the Throttle is Updated flag.
                Controls["Flags", table]["Throttle is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Set Throttle Fault.
                Controls["Faults", table]["Throttle", number] = 1
                Controls["Faults", table]["Message", string] = "Throttle cannot be changed while the Direction is set to Neutral."

                # Return false.
                return 0
            }

            # Throttle is valid.
            else
            {
                # Clear the Throttle is Updated flag.
                #Controls["Flags", table]["Throttle is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Set the Last Valid Throttle.
                Controls["Last Valid Throttle", number] = Controls["Throttle", number]

                # Return true.
                return 1
            }
        }

        # Check if the Brake is Updated.
        elseif (Controls["Flags", table]["Brake is Updated", number] == 1)
        {
            # Currently, the Brake is not yet implemented.
            # This is a placeholder for future development.

            # Clear the Brake is Updated & Player Controls Updated flags.
            Controls["Flags", table]["Brake is Updated", number] = 0
            Controls["Flags", table]["Player Controls Updated", number] = 0

            # Return true.
            return 1
        }

        # Check if the Emergency Brake is Updated.
        elseif (Controls["Flags", table]["Emergency Brake is Updated", number] == 1)
        {
            # An attempt to apply or release the Emergency Brake was made.

            # Check if the Emergency Brake is Released.
            if (Controls["Flags", table]["Emergency Brake is Released", number] == 1)
            {
                # The Emergency Brake is Released. 
                # Apply the Emergency Brake.
                Controls["Emergency Brake", number] = 1

                # Clear the Emergency Brake is Released flag.
                Controls["Flags", table]["Emergency Brake is Released", number] = 0

                # Clear the Emergency Brake is Updated & Player Controls Updated flags.
                #Controls["Flags", table]["Emergency Brake is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Return true.
                return 1
            }

            else
            {
                # The Emergency Brake is already applied. The Emergency Brake cannot be applied again.

                # Set the Emergency Brake Fault.
                # No fault is actually triggered, because the Emergency Brake is automatically released,
                # when the locomotive is stopped.
                Controls["Faults", table]["Emergency Brake", number] = 0 # <--- This is a placeholder for future development.
                Controls["Faults", table]["Message", string] = "The Emergency Brake is already applied."

                # Clear the Emergency Brake is Updated & Player Controls Updated flags.
                Controls["Flags", table]["Emergency Brake is Updated", number] = 0
                Controls["Flags", table]["Player Controls Updated", number] = 0

                # Return false.
                return 0
            }
        }
    }
}

# This function returns the fault message.
function string playerControlsGetFaultMessage(Controls:table)
{
    return Controls["Faults", table]["Message", string]
}

# This function returns the direction fault.
function number playerControlsGetDirectionFault(Controls:table)
{
    return Controls["Faults", table]["Direction", number]
}

# This function returns the throttle fault.
function number playerControlsGetThrottleFault(Controls:table)
{
    return Controls["Faults", table]["Throttle", number]
}

# This function returns the brake fault.
function number playerControlsGetBrakeFault(Controls:table)
{
    return Controls["Faults", table]["Brake", number]
}

# This function returns the emergency brake fault.
function number playerControlsGetEmergencyBrakeFault(Controls:table)
{
    return Controls["Faults", table]["Emergency Brake", number]
}

# This function returns the horn fault.
function number playerControlsGetHornFault(Controls:table)
{
    return Controls["Faults", table]["Horn", number]
}

# This function returns the bell fault.
function number playerControlsGetBellFault(Controls:table)
{
    return Controls["Faults", table]["Bell", number]
}

# This function returns the headlights fault.
function number playerControlsGetHeadlightsFault(Controls:table)
{
    return Controls["Faults", table]["Headlights", number]
}

# This function returns the ditch lights fault.
function number playerControlsGetDitchLightsFault(Controls:table)
{
    return Controls["Faults", table]["Ditch Lights", number]
}

# THis function returns the player controls fault.
function number playerControlsGetFault(Controls:table)
{
    return Controls["Faults", table]["Player Controls", number]
}

# This function clears the fault message.
# Returns true if the fault message was cleared.
# False if no fault message was found.
function number playerControlsClearFaultMessage(Controls:table)
{
    if (Controls["Faults", table]["Message", string] != "")
    {
        Controls["Faults", table]["Message", string] = ""
        return 1
    }
    else
    {
        Controls["Faults", table]["Message", string] = "No fault message found."
        return 0
    }
}

# This function clears the direction fault.
# Returns true if the direction fault was cleared.
# False if the direction fault was not previously set.
function number playerControlsClearDirectionFault(Controls:table)
{
    if (Controls["Faults", table]["Direction", number] == 1)
    {
        Controls["Faults", table]["Direction", number] = 0
        return 1
    }
    else
    {
        Controls["Faults", table]["Message", string] = "Direction fault was not previously set."
        return 0
    }
}

# This function clears the throttle fault.
# Returns true if the throttle fault was cleared.
# False if the throttle fault was not previously set.
function number playerControlsClearThrottleFault(Controls:table)
{
    if (Controls["Faults", table]["Throttle", number] == 1)
    {
        Controls["Faults", table]["Throttle", number] = 0
        return 1
    }
    else
    {
        Controls["Faults", table]["Message", string] = "Throttle fault was not previously set."
        return 0
    }
}

# This function clears the brake fault.
# Returns true if the brake fault was cleared.
# False if the brake fault was not previously set.
function number playerControlsClearBrakeFault(Controls:table)
{
    if (Controls["Faults", table]["Brake", number] == 1)
    {
        Controls["Faults", table]["Brake", number] = 0
        return 1
    }
    else
    {
        Controls["Faults", table]["Message", string] = "Brake fault was not previously set."
        return 0
    }
}

# This function clears the emergency brake fault.
# Returns true if the emergency brake fault was cleared.
# False if the emergency brake fault was not previously set.
function number playerControlsClearEmergencyBrakeFault(Controls:table)
{
    if (Controls["Faults", table]["Emergency Brake", number] == 1)
    {
        Controls["Faults", table]["Emergency Brake", number] = 0
        return 1
    }
    else
    {
        Controls["Faults", table]["Message", string] = "Emergency Brake fault was not previously set."
        return 0
    }
}

# This function clears all faults.
# Returns true if all faults were cleared.
# False if no faults were found.
function number playerControlsClearAllFaults(Controls:table)
{
    if (Controls["Faults", table]["Direction", number] == 1 | Controls["Faults", table]["Throttle", number] == 1 | Controls["Faults", table]["Brake", number] == 1 | Controls["Faults", table]["Emergency Brake", number] == 1)
    {
        Controls["Faults", table]["Direction", number] = 0
        Controls["Faults", table]["Throttle", number] = 0
        Controls["Faults", table]["Brake", number] = 0
        Controls["Faults", table]["Emergency Brake", number] = 0
        return 1
    }
    else
    {
        Controls["Faults", table]["Message", string] = "No faults found."
        return 0
    }
}

# This function returns the key binding of the specified control.
function string playerControlsGetKeyBinding(Controls:table, Control:string)
{
    return Controls["Key Bindings", table][Control, string]
}
