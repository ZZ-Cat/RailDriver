#[
    This script header is a part of the RailDriver project.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/controls/playerControls
@persist PCDirection PCThrottle PCBrake PCEmergencyBrake PCHorn PCHeadlights PCDitchLights
@persist PCTrainDriver:entity

# This function initializes the player controls.
# This function should be called once per player.
function table playerControlsInit(KeyboardControls:table, ThrottleMap:table, BrakeMap:table, TrainDriver:entity)
{
    local Controls = table()
    Controls["Direction", number] = 0
    Controls["Throttle", number] = 0
    Controls["Brake", number] = 0
    Controls["Horn", number] = 0
    Controls["Bell", number] = 0
    Controls["Headlights", number] = 0
    Controls["DitchLights", number] = 0
    Controls["TrainDriver", entity] = TrainDriver
    Controls["Controls", table] = KeyboardControls

    # 'table:toArray()' is bugged, so I am directly using the throttle and brake maps.
    Controls["ThrottleMap", table] = ThrottleMap
    Controls["BrakeMap", table] = BrakeMap

    runOnKeys(Controls["TrainDriver", entity], 1)
    return Controls
}

# This function updates the player controls.
# This function should be called every key clock tick.
function void playerControlsUpdate(Controls:table)
{
    local KeyPressed = keyClkPressed()
    local KeyState = keyClk(Controls["TrainDriver", entity]) == 1 ? 1 : 0

    local String = ""
    String += "Key: " + KeyPressed + ", State: " + KeyState
    #printColor(vec(0, 255, 0), "[RailDriver | DEBUG]", vec(255, 255, 255), ": " + String)

    if (Controls["TrainDriver", entity]:inVehicle())
    {
        if (KeyPressed)
        {
            # Set direction to forward if the forward key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][1, string])
            {
                Controls["Direction", number] = Controls["Direction", number] + 1
                Controls["Direction", number] = clamp(Controls["Direction", number], -1, 1)
            }

            # Set direction to reverse if the reverse key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][2, string])
            {
                Controls["Direction", number] = Controls["Direction", number] - 1
                Controls["Direction", number] = clamp(Controls["Direction", number], -1, 1)
            }

            # Increase throttle if the increase throttle key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][3, string])
            {
                # Increase throttle by 1.
                Controls["Throttle", number] = Controls["Throttle", number] + 1

                # Get the throttle map.
                local ThrMap = Controls["ThrottleMap", table]

                # Clamp the throttle to the maximum value in the throttle map.
                # Each throttle map has its own minimum & maximum values.
                switch(ThrMap["Throttle Input Type", string])
                {
                    # Velocity Mode.
                    case "Velocity",
                        Controls["Throttle", number] = clamp(Controls["Throttle", number], 0, ThrMap["Velocity Setpoint", array]:count())
                    break

                    # Acceleration Mode.
                    case "Acceleration",
                        Controls["Throttle", number] = clamp(Controls["Throttle", number], 0, ThrMap["Acceleration Setpoint", array]:count())
                    break

                    # Torque Mode.
                    case "Torque",
                        Controls["Throttle", number] = clamp(Controls["Throttle", number], 0, ThrMap["Torque Setpoint", array]:count())
                    break
                }
            }

            # Decrease throttle if the decrease throttle key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][4, string])
            {
                # Decrease throttle by 1.
                Controls["Throttle", number] = Controls["Throttle", number] - 1

                # Get the throttle map.
                local ThrMap = Controls["ThrottleMap", table]

                # Clamp the throttle to the minimum value in the throttle map.
                # Each throttle map has its own minimum & maximum values.
                switch(ThrMap["Throttle Input Type", string])
                {
                    # Velocity Mode.
                    case "Velocity",
                        Controls["Throttle", number] = clamp(Controls["Throttle", number], 0, ThrMap["Velocity Setpoint", array]:count())
                    break

                    # Acceleration Mode.
                    case "Acceleration",
                        Controls["Throttle", number] = clamp(Controls["Throttle", number], 0, ThrMap["Acceleration Setpoint", array]:count())
                    break

                    # Torque Mode.
                    case "Torque",
                        Controls["Throttle", number] = clamp(Controls["Throttle", number], 0, ThrMap["Torque Setpoint", array]:count())
                    break
                }
            }

            }

            # Set emergency brake if the emergency brake key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][5, string])
            {
                Controls["Brake", number] = -1
            }

            # Set horn if the horn key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][6, string])
            {
                Controls["Horn", number] = 1
            }

            # Release horn if the horn key is released.
            elseif (KeyState == -1 & KeyPressed == Controls["Controls", array][6, string])
            {
                Controls["Horn", number] = 0
            }

            # Toggle bell if the bell key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][7, string])
            {
                Controls["Bell", number] = Controls["Bell", number] == 0 ? 1 : 0
            }

            # Toggle headlights if the headlights key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][8, string])
            {
                Controls["Headlights", number] = Controls["Headlights", number] == 0 ? 1 : 0
            }

            # Toggle ditch lights if the ditch lights key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][9, string])
            {
                Controls["DitchLights", number] = Controls["DitchLights", number] == 0 ? 1 : 0
            }
        }
    }
}

# This function returns the direction of the locomotive.
function number playerControlsGetDirection(Controls:table)
{
    return Controls["Direction", number]
}

# This function returns the player's throttle input based on the throttle map & what operating mode the PIDF controller is in.
function number playerControlsGetThrottle(Controls:table, PIDFMode:number)
{
    # If the PIDF controller is in velocity mode, return the throttle map value.
    if (PIDFMode == 0)
    {
        return Controls["ThrottleMap", array][Controls["Throttle", number], number]
    }

    # If the PIDF controller is in acceleration mode, return the throttle map value.
    elseif (PIDFMode == 1)
    {
        return Controls["ThrottleMap", array][Controls["Throttle", number], number]
    }

    # If the PIDF controller is in torque mode, return the throttle value.
    elseif (PIDFMode == 2)
    {
        return Controls["Throttle", number]
    }
}

# This function returns the player's brake input based on the brake map & what operating mode the PIDF controller is in.
function number playerControlsGetBrake(Controls:table, PIDFMode:number)
{
    # Brake is always 0 if the PIDF controller is in velocity mode.
    if (PIDFMode == 0)
    {
        return 0
    }

    # If the PIDF controller is in acceleration mode, return the brake map value.
    elseif (PIDFMode == 1)
    {
        return Controls["BrakeMap", array][Controls["Brake", number], number]
    }

    # If the PIDF controller is in torque mode, return the brake value.
    elseif (PIDFMode == 2)
    {
        return Controls["Brake", number]
    }
}

# This function is used to decode the keyboard controls.
function array decodeKeyboardControls(KeyboardControls:table)
{
    local Controls = array()

    foreach(K, V:string = KeyboardControls)
    {
        
    }

    return Controls
}
