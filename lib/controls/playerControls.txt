#[
    This script header is a part of the RailDriver project.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/controls/playerControls
@persist PCDirection PCThrottle PCBrake PCEmergencyBrake PCHorn PCHeadlights PCDitchLights
@persist PCTrainDriver:entity

# This function initializes the player controls.
# This function should be called once per player.
function table playerControlsInit(KeyboardControls:table, ThrottleMap:table, BrakeMap:table, TrainDriver:entity)
{
    local Controls = table()
    Controls["Direction", number] = 0
    Controls["Throttle", number] = 0
    Controls["Brake", number] = 0
    Controls["Horn", number] = 0
    Controls["Bell", number] = 0
    Controls["Headlights", number] = 0
    Controls["DitchLights", number] = 0
    Controls["TrainDriver", entity] = TrainDriver
    Controls["Controls", array] = KeyboardControls:toArray()
    Controls["ThrottleMap", array] = ThrottleMap:toArray()
    Controls["BrakeMap", array] = BrakeMap:toArray()
    runOnKeys(Controls["TrainDriver", entity], 1)
    return Controls
}

# This function updates the player controls.
# This function should be called every key clock tick.
function void playerControlsUpdate(Controls:table)
{
    local KeyPressed = keyClkPressed()
    local KeyState = keyClk(Controls["TrainDriver", entity]) == 1 ? 1 : 0

    local String = ""
    String += "Key: " + KeyPressed + ", State: " + KeyState
    #printColor(vec(0, 255, 0), "[RailDriver | DEBUG]", vec(255, 255, 255), ": " + String)

    if (Controls["TrainDriver", entity]:inVehicle())
    {
        if (KeyPressed)
        {
            # Set direction to forward if the forward key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][1, string])
            {
                Controls["Direction", number] = Controls["Direction", number] + 1
                Controls["Direction", number] = clamp(Controls["Direction", number], -1, 1)
            }

            # Set direction to reverse if the reverse key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][2, string])
            {
                Controls["Direction", number] = Controls["Direction", number] - 1
                Controls["Direction", number] = clamp(Controls["Direction", number], -1, 1)
            }

            # Increase throttle if the increase throttle key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][3, string])
            {
                Controls["Throttle", number] = Controls["Throttle", number] + 1
                Controls["Throttle", number] = clamp(Controls["Throttle", number], 0, Controls["ThrottleMap", array]:count())
            }

            # Decrease throttle if the decrease throttle key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][4, string])
            {
                Controls["Throttle", number] = Controls["Throttle", number] - 1
                Controls["Throttle", number] = clamp(Controls["Throttle", number], 0, Controls["ThrottleMap", array]:count())
            }

            # Set emergency brake if the emergency brake key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][5, string])
            {
                Controls["Brake", number] = -1
            }

            # Set horn if the horn key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][6, string])
            {
                Controls["Horn", number] = 1
            }

            # Release horn if the horn key is released.
            elseif (KeyState == -1 & KeyPressed == Controls["Controls", array][6, string])
            {
                Controls["Horn", number] = 0
            }

            # Toggle bell if the bell key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][7, string])
            {
                Controls["Bell", number] = Controls["Bell", number] == 0 ? 1 : 0
            }

            # Toggle headlights if the headlights key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][8, string])
            {
                Controls["Headlights", number] = Controls["Headlights", number] == 0 ? 1 : 0
            }

            # Toggle ditch lights if the ditch lights key is pressed.
            if (KeyState == 1 & KeyPressed == Controls["Controls", array][9, string])
            {
                Controls["DitchLights", number] = Controls["DitchLights", number] == 0 ? 1 : 0
            }
        }
    }
}

# This function returns the direction of the locomotive.
function number playerControlsGetDirection(Controls:table)
{
    return Controls["Direction", number]
}

