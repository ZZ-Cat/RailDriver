#[
    This script header is a part of RailDriver.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/cli

#[
    RailDriver CLI Library

    This library provides a simple command-line interface for RailDriver, using the
    in-game chat. It is intended to be used by the RailDriver E2 script, but can be
    used by other E2 scripts as well.
]#

# This function is called by the RailDriver E2 script to initialize the CLI.
# It should be called once, at the beginning of the script.
# @param CliPrefix The prefix to use for CLI commands.
# @return table A handle to the CLI library.
function table cliInit(CliPrefix:string)
{
    # Initialize the CLI library.
    local Cli = table()
    Cli["Prefix", string] = CliPrefix
    Cli["Commands", table] = table()
    Cli["Commands", table]["Flags", table] = table()

    # Register the help command.
    Cli["Commands", table]["help", table] = table()
    Cli["Commands", table]["help", table]["Arguments", array] = array()
    Cli["Commands", table]["help", table]["help", string] = "Displays this help message."
    Cli["Commands", table]["Flags", table]["help is updated", number] = 0

    # Register the about command.
    Cli["Commands", table]["about", table] = table()
    Cli["Commands", table]["about", table]["Arguments", array] = array()
    Cli["Commands", table]["about", table]["help", string] = "Displays information about RailDriver."
    Cli["Commands", table]["Flags", table]["about is updated", number] = 0

    # Register the controls command.
    Cli["Commands", table]["controls", table] = table()
    Cli["Commands", table]["controls", table]["Arguments", array] = array()
    Cli["Commands", table]["controls", table]["help", string] = "Displays a list of available player controls."
    Cli["Commands", table]["Flags", table]["controls is updated", number] = 0

    # Register the restart command.
    Cli["Commands", table]["restart", table] = table()
    Cli["Commands", table]["restart", table]["Arguments", array] = array()
    Cli["Commands", table]["restart", table]["help", string] = "Restarts the RailDriver script."
    Cli["Commands", table]["Flags", table]["restart is updated", number] = 0

    # Return the CLI library.
    return Cli
}

# This function is called by the RailDriver E2 script to register a new command.
# @param Cli A handle to the CLI library.
# @param Command The command to register.
# @param Arguments An array of argument names.
# @param Help The help text for the command.
# @return true if the command was registered successfully, false otherwise.
function number cliRegisterCommand(Cli:table, Command:string, Arguments:array, Help:string)
{
    # Check if the command already exists.
    if (Cli["Commands", table][Command, table] != table())
    {
        return 0
    }

    # Register the command, help text, and flags.
    Cli["Commands", table][Command, table] = table()
    Cli["Commands", table][Command, table]["Arguments", array] = Arguments
    Cli["Commands", table][Command, table]["help", string] = Help
    Cli["Commands", table]["Flags", table][Command + " is updated", number] = 0

    # Return success.
    return 1
}

# This function is called by the RailDriver E2 script to unregister an existing command.
# @param Cli A handle to the CLI library.
# @param Command The command to unregister.
# @return true if the command was unregistered successfully, false otherwise.
function number cliUnregisterCommand(Cli:table, Command:string)
{
    # Check if the command exists.
    if (Cli["Commands", table][Command, table] == table())
    {
        return 0
    }

    # Unregister the command, argumants, help text, and flags.
    Cli["Commands", table][Command, table] = table()
    Cli["Commands", table][Command, table]["Arguments", array] = array()
    Cli["Commands", table][Command, table]["help", string] = ""
    Cli["Commands", table]["Flags", table][Command + " is updated", number] = 0

    # Return success.
    return 1
}

# This function is called by the RailDriver E2 script to check if a command has been updated.
# @param Cli A handle to the CLI library.
# @param Command The command to check.
# @return true if the command has been updated, false otherwise.
function number cliIsCommandUpdated(Cli:table, Command:string)
{
    # Command is case-insensitive.
    Command = Command:lower():trim()

    # Check if the command exists.
    if (Cli["Commands", table][Command, table] == table())
    {
        return 0
    }

    # Check if the command has been updated.
    if (Cli["Commands", table]["Flags", table][Command + " is updated", number] == 0)
    {
        return 0
    }

    # Reset the command update flag.
    Cli["Commands", table]["Flags", table][Command + " is updated", number] = 0

    # Return success.
    return 1
}

# This function is called by the RailDriver E2 script to check if the help command has been updated.
# @param Cli A handle to the CLI library.
# @return true if the help command has been updated, false otherwise.
function number cliHelpIsUpdated(Cli:table)
{
    # Check if the help command has been updated.
    if (Cli["Commands", table]["Flags", table]["help is updated", number] == 0)
    {
        return 0
    }

    # Reset the help command update flag.
    Cli["Commands", table]["Flags", table]["help is updated", number] = 0

    # Return success.
    return 1
}

# This function is called by the RailDriver E2 script to check if the about command has been updated.
# @param Cli A handle to the CLI library.
# @return true if the about command has been updated, false otherwise.
function number cliAboutIsUpdated(Cli:table)
{
    # Check if the about command has been updated.
    if (Cli["Commands", table]["Flags", table]["about is updated", number] == 0)
    {
        return 0
    }

    # Reset the about command update flag.
    Cli["Commands", table]["Flags", table]["about is updated", number] = 0

    # Return success.
    return 1
}

# This function is called by the RailDriver E2 script to check if the controls command has been updated.
# @param Cli A handle to the CLI library.
# @return true if the controls command has been updated, false otherwise.
function number cliControlsIsUpdated(Cli:table)
{
    # Check if the controls command has been updated.
    if (Cli["Commands", table]["Flags", table]["controls is updated", number] == 0)
    {
        return 0
    }

    # Reset the controls command update flag.
    Cli["Commands", table]["Flags", table]["controls is updated", number] = 0

    # Return success.
    return 1
}

# This function is called by the RailDriver E2 script to check if the restart command has been updated.
# @param Cli A handle to the CLI library.
# @return true if the restart command has been updated, false otherwise.
function number cliRestartIsUpdated(Cli:table)
{
    # Check if the restart command has been updated.
    if (Cli["Commands", table]["Flags", table]["restart is updated", number] == 0)
    {
        return 0
    }

    # Reset the restart command update flag.
    Cli["Commands", table]["Flags", table]["restart is updated", number] = 0

    # Return success.
    return 1
}

# This function is called by the RailDriver E2 script to get the help text for a command.
# @param Cli A handle to the CLI library.
# @param Command The command to get the help text for.
# @return The help text for the command.
function string cliGetHelp(Cli:table, Command:string)
{
    # Command is case-insensitive.
    Command = Command:lower():trim()

    # Check if the command exists.
    if (Cli["Commands", table][Command, table] == table())
    {
        return ""
    }

    # Return the help text.
    return Cli["Commands", table][Command, table]["help", string]
}

# This function is called by the RailDriver E2 script to process a chat message.
# No callbacks are made by this function. Instead, the cliCommandIsUpdated function
# should be called to check if a command has been updated.
# @param Cli A handle to the CLI library.
# @param Message The chat message to process.
# @return true if the message was processed successfully, false otherwise.
function number cliProcessMessage(Cli:table, Message:string)
{
    # Message is case-insensitive.
    Message = Message:lower():sub(1, 64):trim()

    # Check if the message is a command.
    if (Message:sub(1, Cli["Prefix", string]:length()) != Cli["Prefix", string])
    {
        return 0
    }

    # Hide the message from the chat.
    hideChat(1)

    # Parse the command and arguments.
    local Command = Message:sub(Cli["Prefix", string]:length() + 1):trim()
    local Arguments = Command:explode(" ")

    # Check if the command exists.
    if (Cli["Commands", table][Arguments[1, string], table] == table())
    {
        printColor(vec(255, 0, 0), "[RailDriver | cli | ERROR] ", vec(255, 255, 255),": Invalid command.")
        return 0
    }

    # Update the command.
    Cli["Commands", table][Arguments[1, string], table]["Arguments", array] = Arguments
    Cli["Commands", table]["Flags", table][Arguments[1, string] + " is updated", number] = 1

    # Return success.
    return 1
}
