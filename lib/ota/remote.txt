#[
    This script header is a part of RailDriver.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2023, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/ota/online

#[
    Online OTA Updates library for RailDriver.

    This library is used to check for updates to RailDriver and download them.
]#

# This function initializes the Online OTA Updates library.
# @return The handle to the Online OTA Updates library.
function table otaOnlineInit()
{
    local Ota = table()

    Ota["Online Updates Branch", string] = "Main-Trunk"
    Ota["Version File URL", string] = ""
    Ota["Clock ID", string] = "RailDriver OTA Online Clock"
    Ota["Clock Delay", number] = 0
    Ota["HTTP Request Attempts", number] = 0
    Ota["HTTP Request Max Attempts", number] = 3
    Ota["HTTP Request Tick", number] = 1000

    # The selected URL to download the update from.
    Ota["URL to Get", string] = ""

    # Flags.
    Ota["Flags", table] = table()
    Ota["Flags", table]["HTTP Request Sent", number] = 0
    Ota["Flags", table]["HTTP Request Received", number] = 0
    Ota["Flags", table]["HTTP Request Failed", number] = 0
    Ota["Flags", table]["Update Process Started", number] = 0
    Ota["Flags", table]["Version File is Valid", number] = 0

    return Ota
}

# This function starts the online OTA clock.
# @param Ota The handle to the Online OTA Updates library.
# @param Interval The interval at which to make http requests.
# @return void
function void otaOnlineStartClock(Ota:table, Interval:number)
{
    Ota["Clock Delay", number] = Interval
    timer(Ota["Clock ID", string], Interval)
}

# This function stops the online OTA clock.
# @param Ota The handle to the Online OTA Updates library.
# @return void
function void otaOnlineStopClock(Ota:table)
{
    stoptimer(Ota["Clock ID", string])
}

# This function restarts the online OTA clock with the last used interval.
# @param Ota The handle to the Online OTA Updates library.
# @return void
function void otaOnlineRestartClock(Ota:table)
{
    otaOnlineStopClock(Ota)
    otaOnlineStartClock(Ota, Ota["Clock Delay", number])
}

# This function returns the clock ID.
# @param Ota The handle to the Online OTA Updates library.
# @return string The clock ID.
function string otaOnlineGetClockID(Ota:table)
{
    return Ota["Clock ID", string]
}

# This function compiles the URL to the online Version File & starts the online OTA update process.
# @param OtaOnline The handle to the Online OTA Updates library.
# @param OtaLocal The handle to the Local OTA Updates library.
# @return true if the online OTA update process started successfully, false otherwise.
function number otaOnlineUpdateRailDriver(OtaOnline:table, OtaLocal:table)
{
    # Return an empty string if the local Version File is not valid.
    if (OtaLocal["Flags", table]["Version File is Valid", number] != 1 | OtaLocal:count() == 0 | OtaLocal["RailDriver", table]:count() == 0)
    {
        return 0
    }

    # Compile the URL to RailDriver's online Version File.
    local BaseURL = "https://raw.githubusercontent.com/"
    local Username = ""
    local Repository = ""
    local Branch = ""
    local Path = ""
    local File = ""
    local URL = ""

    Username = OtaLocal["RailDriver", table]["Developers", table]["Owner", table]["Social", table]["GitHub", table]["Username", string]
    Repository = OtaLocal["RailDriver", table]["Main", table]["File", string]:explode(".")[1, string]
    Branch = OtaOnline["Online Updates Branch", string]
    Path = OtaLocal["RailDriver", table]["Libraries", table]["Over-The-Air Updates", table]["Online", table]["Path", string]
    File = "version.json"

    # Remove "e2shared/RailDriver/" from the Path.
    local PathPartsToReplace = "e2shared/RailDriver/"
    Path = Path:sub(PathPartsToReplace:length() + 1, Path:length())

    # Compile the URL.
    OtaOnline["Version File URL", string] = BaseURL + Username + "/" + Repository + "/" + Branch + "/" + Path + "/" + File
    OtaOnline["URL to Get", string] = OtaOnline["Version File URL", string]

    # Set the Update Process Started flag.
    OtaOnline["Flags", table]["Update Process Started", number] = 1

    # Start the online OTA update process.
    runOnHTTP(1)
    otaOnlineStartClock(OtaOnline, 500)

    return 1
}

# This function is used to check if the Online Version File is valid.
# @param Ota The handle to the Online OTA Updates library.
# @param RawData The raw HTTP data.
# @return true if the Online Version File is valid, false otherwise.
function number otaOnlineIsVersionFileValid(Ota:table, RawData:string)
{
    local Lines = RawData:explode("\n")
    local HashFile = 0
    local HashCalculated = 0

    for (I = (Lines:count() - 4), Lines:count())
    {
        local Line = Lines[I, string]
        local LineTrimmed = Line:trim()
        local LineParts = LineTrimmed:explode(":")

        # Remove the quotes from both ends of the string.
        local LineName = LineParts[1, string]:sub(2, LineParts[1, string]:length() - 1)
        local LineValue = LineParts[2, string]:sub(2, LineParts[2, string]:length() - 1)

        if (LineName == "Hash")
        {
            if (Lines[I - 1, string]:find(","))
            {
                HashFile = LineValue:toNumber()
                Lines[I - 1, string] = Lines[I - 1, string]:replace(",", "")
                Lines:removeString(I)
                break
            }
        }
    }

    # Check if the hash checksum from the file exists.
    assert(HashFile != 0, "Missing checksum in the online Version File.")

    # Create a version of the file without the hash.
    local RawDataNoSum = ""
    local HashOccurrences = 0
    for (I = 1, Lines:count())
    {
        # Don't add a newline to the last line.
        if (I == Lines:count())
        {
            RawDataNoSum = RawDataNoSum + Lines[I, string]
            break
        }

        else
        {
            # Remove all occurrences of "Hash" from the file &
            # remove the comma that precedes it.
            local LineTrimmed = Lines[I, string]:trim()
            if (LineTrimmed:find("\"Hash\":") == 1)
            {
                Lines[I - 1, string] = Lines[I - 1, string]:replace(",", "")
                Lines[I, string] = ""
                HashOccurrences = HashOccurrences + 1
            }

            # Add a newline to all other lines.
            else
            {
                RawDataNoSum = RawDataNoSum + Lines[I, string] + "\n"
            }
        }
    }

    # Calculate the hash checksum.
    HashCalculated = hash(RawDataNoSum)

    # Debug.
    # print("Hash File: " + HashFile)
    # print("Hash Calculated: " + HashCalculated)

    Ota["Flags", table]["Version File is Valid", number] = (HashFile == HashCalculated) ? 1 : 0

    return Ota["Flags", table]["Version File is Valid", number]
}

# This function is called to make an HTTP request.
# @param Ota The handle to the Online OTA Updates library.
# @return void
function void otaOnlineSendRequestHandler(Ota:table)
{
    # Check if an HTTP request has been sent.
    if (Ota["Flags", table]["HTTP Request Sent", number] == 0)
    {
        # Check if an HTTP request can be sent at this time.
        if (httpCanRequest())
        {
            otaOnlineStopClock(Ota)
            httpRequest(Ota["URL to Get", string])
            Ota["HTTP Request Attempts", number] = 0
            Ota["Flags", table]["HTTP Request Received", number] = 0
            Ota["Flags", table]["HTTP Request Sent", number] = 1
        }

        # Handle the case where an HTTP request cannot be sent at this time.
        else
        {
            # Get the number of HTTP request attempts.
            otaOnlineStopClock(Ota)
            Ota["HTTP Request Attempts", number] = Ota["HTTP Request Attempts", number] + 1

            # Check if the HTTP request has been attempted too many times.
            if (Ota["HTTP Request Attempts", number] >= Ota["HTTP Request Max Attempts", number])
            {
                Ota["HTTP Request Attempts", number] = 0
                Ota["Flags", table]["HTTP Request Failed", number] = 1
                Ota["Flags", table]["HTTP Request Sent", number] = 0
                Ota["Flags", table]["HTTP Request Received", number] = 0
                Ota["Flags", table]["Update Process Started", number] = 0
                runOnHTTP(0)
                error("Failed to send HTTP request to:\n" + Ota["URL to Get", string])
            }

            # Restart the online OTA clock.
            else
            {
                otaOnlineStartClock(Ota, 3000)
            }
        }
    }
}

# This function is called when an HTTP request is received.
# @param Ota The handle to the Online OTA Updates library.
# @return void
function void otaOnlineReceiveResponseHandler(Ota:table)
{
    runOnHTTP(0)

    Ota["Flags", table]["HTTP Request Sent", number] = 0

    # Check if the HTTP request was successful.
    if (httpSuccess() == 1)
    {
        Ota["Flags", table]["HTTP Request Failed", number] = 0

        # Get the HTTP response.
        local RequestedURL = httpRequestUrl()
        local HttpData = httpData()

        # Get the error code from the HTTP response.
        local ErrorCode = HttpData:explode(" ")[1, string]:sub(1, 3):toNumber()

        # Assert that the error code is 0.
        assert(ErrorCode == 0, "Failed to get the online Version File.\nError Code: " + ErrorCode + "\nError Message: " + HttpData:sub(5, HttpData:length()))

        if (RequestedURL == Ota["Version File URL", string])
        {
            Ota["Flags", table]["HTTP Request Received", number] = 1

            # Assert that the online Version File is valid.
            assert(otaOnlineIsVersionFileValid(Ota, HttpData) == 1, "The online Version File is invalid.")

            #[
                Notes from @ZZ-Cat on Scanning the Version Files for Updates:

                How exactly am I going to go about this?
                With the local Version File, I am scanning through the file & comparing the
                checksums of each file to the checksums that are in the local Version File.
                That is how I am determining if a file needs to be updated or not.

                With the online Version File, it is a little bit different.
                This is because I need to somehow compare the semantic version numbers of each
                library (including RailDriver's main file) to the semantic version numbers in the
                local Version File.
                This becomes more complicated when I need to compare the checksums of each file
                in the online Version File to the checksums in the local Version File.

                I have two ways that I can accomplish this.
                The first way is to compare the checksums first & then compare the semantic
                version numbers.
                The second way is to compare the semantic version numbers first & then compare
                the checksums.

                In the first way, I can easily use the checksums & the semantic version numbers
                to catch any errors. For example, if the checksums don't match, then I know that
                the file has been modified. Then, I can compare the semantic version numbers to
                see if the file needs to be updated. If the semantic version numbers in the local
                Version File are greater than the semantic version numbers in the online Version
                File, then I can check if the player is a developer. If the player is not a developer,
                then I can throw an error. If the player is a developer, I may want to throw a warning
                to remind the developer to update the online Version File on GitHub.
                Then, if the semantic version numbers in the local Version File are less than the
                semantic version numbers in the online Version File, then one or more of RailDriver's
                files need to be updated.
                If the semantic version numbers in the local Version File are equal to the semantic
                version numbers in the online Version File, then the file does not need to be updated.
                
                Additionally, I will not throw any errors or warnings here, regardless of whether or
                not the player is a developer. This is because the player may have modified one or
                more of RailDriver's files, to tune the script to their liking. In this case, the
                semantic version numbers in the local Version File must remain unchanged. This is
                to maintain the integrity of the local Version File, because it also contains the
                license, attribution, & other vital information about RailDriver; which is important
                for the player to keep intact. If the player modifies the semantic version numbers
                in the local Version File, then not only are they corrupting the local Version File,
                they are also violating the license & attribution requirements.

                In the case where the player is a developer (such as yours truly), seeing errors
                or warnings here is annoying.
                This is because I am constantly working on RailDriver both on my local machine &
                on GitHub. This means that I am constantly updating the online Version File on
                GitHub, but I am not always updating the local Version File on my local machine.
                I have automated this process as much as I can, but it is still annoying to see
                errors & warnings here, when I know that I am working on RailDriver.

                In the second way, I need to parse the semantic version numbers of both the local
                Version File & the online Version File before I can compare the checksums.
                Then, I can compare the checksums to see if the file needs to be updated.
                Doing it this way adds more computational overhead to RailDriver, due to the fact
                that the semantic version numbers are being parsed on every file in both the local
                Version File & the online Version File.
                Another downside to this method is that I cannot catch errors quite so easily.
                Or, even if I can, this will add to the computational overhead brought on by parsing
                the semantic version numbers. If I am not careful, this can cause 'Tick Quota Exceeded'
                errors to occur, & RailDriver will crash.

                I have reason to believe that the first way is the better way to go about this,
                because it is more efficient & it is a more reliable way to catch errors.
                However, right now, I am undecided on which way I need to go about this.

                I will need to do some testing to see which way is better.
                I will create another branch off of this branch to test the first way.
                Then, I will create another branch off of this branch to test the second way.
                Each branch will be named 'Version-File-Scanning-Method-1' & 'Version-File-Scanning-Method-2',
                respectively. They will also have slightly different semantic version numbers, so that
                I can test the update process independently of the other branch.
                Both branches will have their own respective Pull Requests on GitHub, & I will merge
                the branch that I conclude is the better method into this branch.

                This does mean that Version 1.0.0-RC1 will be delayed. However, I have no set date for
                the release of Version 1.0.0-RC1, so this is not a big deal.
                With that being said, I will resume working on Version 1.0.0-RC1 after I have finished
                testing the two different methods of scanning the Version Files for updates.

                This branch is the last branch that I will be working on before I release Version 1.0.0-RC1,
                & I will not be working on any other branches until I have finished testing the two
                different methods of scanning the Version Files for updates.
                -- @ZZ-Cat 2022-11-14
            ]#
        }
        else
        {
            Ota["Flags", table]["HTTP Request Received", number] = 0
            Ota["Flags", table]["HTTP Request Failed", number] = 1
            error("Received an HTTP response from an unexpected URL:\n" + RequestedURL)
        }
    }
    else
    {
        Ota["Flags", table]["HTTP Request Failed", number] = 1
        Ota["Flags", table]["Update Process Started", number] = 0

        # Get the HTTP error code.
        local HttpData = httpData()

        # Assert that there is data present in the HTTP response.
        # No data means that there is no internet connection.
        assert(HttpData != "", "You are not connected to the internet.")

        error("Failed to receive HTTP request from:\n" + Ota["URL to Get", string] + "\nError Code: " + HttpData)
    }
}
