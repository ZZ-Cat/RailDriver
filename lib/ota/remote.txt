#[
    This script header is a part of RailDriver.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/ota/online

#[
    Online OTA Updates library for RailDriver.

    This library is used to check for updates to RailDriver and download them.
]#

# This function initializes the Online OTA Updates library.
# @return The handle to the Online OTA Updates library.
function table otaOnlineInit()
{
    local Ota = table()

    Ota["Online Updates Branch", string] = "Over-The-Air-Updates_Part-2-of-2_Online"
    Ota["Version File URL", string] = ""
    Ota["Clock ID", string] = "RailDriver OTA Online Clock"
    Ota["Clock Delay", number] = 0
    Ota["HTTP Request Attempts", number] = 0
    Ota["HTTP Request Max Attempts", number] = 3
    Ota["HTTP Request Tick", number] = 1000

    # The selected URL to download the update from.
    Ota["URL to Get", string] = ""

    # Flags.
    Ota["Flags", table] = table()
    Ota["Flags", table]["HTTP Request Sent", number] = 0
    Ota["Flags", table]["HTTP Request Received", number] = 0
    Ota["Flags", table]["HTTP Request Failed", number] = 0
    Ota["Flags", table]["Update Process Started", number] = 0

    return Ota
}

# This function starts the online OTA clock.
# @param Ota The handle to the Online OTA Updates library.
# @param Interval The interval at which to make http requests.
# @return void
function void otaOnlineStartClock(Ota:table, Interval:number)
{
    Ota["Clock Delay", number] = Interval
    timer(Ota["Clock ID", string], Interval)
}

# This function stops the online OTA clock.
# @param Ota The handle to the Online OTA Updates library.
# @return void
function void otaOnlineStopClock(Ota:table)
{
    stoptimer(Ota["Clock ID", string])
}

# This function restarts the online OTA clock with the last used interval.
# @param Ota The handle to the Online OTA Updates library.
# @return void
function void otaOnlineRestartClock(Ota:table)
{
    otaOnlineStopClock(Ota)
    otaOnlineStartClock(Ota, Ota["Clock Delay", number])
}

# This function returns the clock ID.
# @param Ota The handle to the Online OTA Updates library.
# @return string The clock ID.
function string otaOnlineGetClockID(Ota:table)
{
    return Ota["Clock ID", string]
}

# This function compiles the URL to the online Version File & starts the online OTA update process.
# @param OtaOnline The handle to the Online OTA Updates library.
# @param OtaLocal The handle to the Local OTA Updates library.
# @return true if the online OTA update process started successfully, false otherwise.
function number otaOnlineUpdateRailDriver(OtaOnline:table, OtaLocal:table)
{
    # Return an empty string if the local Version File is not valid.
    if (OtaLocal["Flags", table]["Version File is Valid", number] != 1 | OtaLocal:count() == 0 | OtaLocal["RailDriver", table]:count() == 0)
    {
        return 0
    }

    # Compile the URL to RailDriver's online Version File.
    local BaseURL = "https://raw.githubusercontent.com/"
    local Username = ""
    local Repository = ""
    local Branch = ""
    local Path = ""
    local File = ""
    local URL = ""

    Username = OtaLocal["RailDriver", table]["Developers", table]["Owner", table]["Social", table]["GitHub", table]["Username", string]
    Repository = OtaLocal["RailDriver", table]["Main", table]["File", string]:explode(".")[1, string]
    Branch = OtaOnline["Online Updates Branch", string]
    Path = OtaLocal["RailDriver", table]["Libraries", table]["Over-The-Air Updates", table]["Online", table]["Path", string]
    File = "version.json"

    # Remove "e2shared/RailDriver/" from the Path.
    local PathPartsToReplace = "e2shared/RailDriver/"
    Path = Path:sub(PathPartsToReplace:length() + 1, Path:length())

    # Compile the URL.
    OtaOnline["Version File URL", string] = BaseURL + Username + "/" + Repository + "/" + Branch + "/" + Path + "/" + File
    OtaOnline["URL to Get", string] = OtaOnline["Version File URL", string]

    # Set the Update Process Started flag.
    OtaOnline["Flags", table]["Update Process Started", number] = 1

    # Start the online OTA update process.
    runOnHTTP(1)
    otaOnlineStartClock(OtaOnline, 500)

    return 1
}

# This function is called to make an HTTP request.
# @param Ota The handle to the Online OTA Updates library.
# @return void
function void otaOnlineSendRequestHandler(Ota:table)
{
    # Check if an HTTP request has been sent.
    if (Ota["Flags", table]["HTTP Request Sent", number] == 0)
    {
        # Check if an HTTP request can be sent at this time.
        if (httpCanRequest())
        {
            otaOnlineStopClock(Ota)
            httpRequest(Ota["URL to Get", string])
            Ota["HTTP Request Attempts", number] = 0
            Ota["Flags", table]["HTTP Request Received", number] = 0
            Ota["Flags", table]["HTTP Request Sent", number] = 1
        }

        # Handle the case where an HTTP request cannot be sent at this time.
        else
        {
            # Get the number of HTTP request attempts.
            otaOnlineStopClock(Ota)
            Ota["HTTP Request Attempts", number] = Ota["HTTP Request Attempts", number] + 1

            # Check if the HTTP request has been attempted too many times.
            if (Ota["HTTP Request Attempts", number] >= Ota["HTTP Request Max Attempts", number])
            {
                Ota["HTTP Request Attempts", number] = 0
                Ota["Flags", table]["HTTP Request Failed", number] = 1
                Ota["Flags", table]["HTTP Request Sent", number] = 0
                Ota["Flags", table]["HTTP Request Received", number] = 0
                Ota["Flags", table]["Update Process Started", number] = 0
                runOnHTTP(0)
                error("Failed to send HTTP request to:\n" + Ota["URL to Get", string])
            }

            # Restart the online OTA clock.
            else
            {
                otaOnlineStartClock(Ota, 3000)
            }
        }
    }
}

# This function is called when an HTTP request is received.
# @param Ota The handle to the Online OTA Updates library.
# @return void
function void otaOnlineReceiveResponseHandler(Ota:table)
{
    runOnHTTP(0)

    Ota["Flags", table]["HTTP Request Sent", number] = 0

    # Check if the HTTP request was successful.
    if (httpSuccess() == 1)
    {
        Ota["Flags", table]["HTTP Request Failed", number] = 0

        # Get the HTTP response.
        local RequestedURL = httpRequestUrl()
        local HttpData = httpData()

        # Get the error code from the HTTP response.
        local ErrorCode = HttpData:explode(" ")[1, string]:sub(1, 3):toNumber()

        # Assert that the error code is 0.
        assert(ErrorCode == 0, "Failed to get the online Version File.\nError Code: " + ErrorCode + "\nError Message: " + HttpData:sub(5, HttpData:length()))

        if (RequestedURL == Ota["Version File URL", string])
        {
            Ota["Flags", table]["HTTP Request Received", number] = 1

        }
        else
        {
            Ota["Flags", table]["HTTP Request Received", number] = 0
            Ota["Flags", table]["HTTP Request Failed", number] = 1
            error("Received an HTTP response from an unexpected URL:\n" + RequestedURL)
        }
    }
    else
    {
        Ota["Flags", table]["HTTP Request Failed", number] = 1
        Ota["Flags", table]["Update Process Started", number] = 0

        # Get the HTTP error code.
        local HttpData = httpData()

        # Assert that there is data present in the HTTP response.
        # No data means that there is no internet connection.
        assert(HttpData != "", "You are not connected to the internet.")

        error("Failed to receive HTTP request from:\n" + Ota["URL to Get", string] + "\nError Code: " + HttpData)
    }
}
