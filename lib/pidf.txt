#[
    This script header is a part of RailDriver.

    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver/lib/pid
#include "e2shared/RailDriver/lib/timers"

function table pidCreateInstance()
{
    local S = table()
    S:clear()

    # Default properties:
    S["Sample Time", number] = ticksToMillis(10)
    S["Range", number] = 75000
    S["Scale", number] = 1
    S["Proportional", number] = 0
    S["Integral", number] = 0
    S["Derivative", number] = 0
    S["Feed Forward", number] = 0
    S["Direction", number] = 1
    S["Mode", number] = 1

    # Default CV properties:
    S["CV Floor", number] = -75000
    S["CV Ceiling", number] = 75000

    # Default I-Term limit properties:
    S["Use I-Term Limit", number] = 1
    S["I-Term Limit Max", number] = 75000
    S["I-Term Limit Min", number] = -75000

    # Default I-Term decay properties:
    S["Use I-Term Decay", number] = 1
    S["I-Term Decay Rate", number] = 0.01
    S["I-Term Decay Threshold", number] = 5.0
    S["I-Term Decay Hysteresis", number] = (1/100)*S["I-Term Decay Threshold", number]

    # Default I-Term Relax properties:
    S["Use I-Term Relax", number] = 1
    S["I-Term Relax Threshold", number] = 40.0
    S["I-Term Relax Type", string] = "Set Point"

    # Primary variables:
    S["Set Point", number] = 0
    S["Process Variable", number] = 0
    S["Control Variable", number] = 0

    # Feedforward Gains:
    S["PIDF Coefficient Kf Primary", number] = 100
    S["PIDF Coefficient Kf Acceleration", number] = 0
    S["PIDF Coefficient Kf Yaw Rate", number] = 0
    S["PIDF Coefficient Kf Pitch Angle", number] = 0
    S["PIDF Coefficient Kf Hill Climb/Descent", number] = 0
    S["PIDF Coefficient Kf Throttle", number] = 0
    S["PIDF Coefficient Kf Brake", number] = 0

    # Feedforward Limits:
    S["Use Feedforward Limit", number] = 1
    S["Feedforward Limit Max", number] = 75000
    S["Feedforward Limit Min", number] = -75000

    # Internal Gains:
    S["Internal P Gain", number] = 0
    S["Internal I Gain", number] = 0
    S["Internal D Gain", number] = 0
    S["Internal FF Primary", number] = 1.0
    S["Internal FF Accel", number] = 0
    S["Internal FF Yaw Rate", number] = 0
    S["Internal FF Pit Ang", number] = 0
    S["Internal FF Hill Climb/Descent", number] = 0
    S["Internal FF Thr", number] = 0
    S["Internal FF Brk", number] = 0

    # Last known variables:
    S["Last Time", number] = 0
    S["Last Process Variable", number] = 0

    # Control Variable summing bus:
    S["P-Term", number] = 0
    S["I-Term", number] = 0
    S["D-Term", number] = 0
    S["FF Accel", number] = 0
    S["FF Yaw Rate", number] = 0
    S["FF Pit Ang", number] = 0
    S["FF Hill Climb/Descent", number] = 0
    S["FF Thr", number] = 0
    S["FF Brk", number] = 0
    S["FF Sum", number] = 0
    S["CV Sum", number] = 0

    # Return the PID table that was created.
    return S
}

function number pidSetFeedforwardLimits(S:table, Min, Max)
{
    if (Min > Max)
    {
        return 0
    }

    else
    {
        S["Feedforward Limit Min", number] = Min
        S["Feedforward Limit Max", number] = Max

        if (S["Use Feedforward Limit", number] != 0)
        {
            S["FF Sum", number] = clamp(S["FF Sum", number], S["Feedforward Limit Min", number], S["Feedforward Limit Max", number])
        }

        return 1
    }
}

function number pidSetItermDecay(S:table, Rate, Threshold, Hysteresis)
{
    S["I-Term Decay Rate", number] = Rate
    S["I-Term Decay Threshold", number] = Threshold
    S["I-Term Decay Hysteresis", number] = (Hysteresis/100) * S["I-Term Decay Threshold", number]
    return 1
}

function number pidSetItermLimits(S:table, Min, Max)
{
    if (Min > Max)
    {
        return 0
    }

    else
    {
        S["I-Term Limit Min", number] = Min
        S["I-Term Limit Max", number] = Max

        if (S["Use I-Term Limit", number] != 0)
        {
            S["I-Term", number] = clamp(S["I-Term", number], S["I-Term Limit Min", number], S["I-Term Limit Max", number])
        }

        return 1
    }
}

function number pidSetOutputLimits(S:table, Floor, Ceiling)
{
    if (Floor > Ceiling)
    {
        return 0
    }

    else
    {
        S["CV Floor", number] = Floor
        S["CV Ceiling", number] = Ceiling

        if (S["Mode", number] != 1)
        {
            return 0
        }

        S["CV Sum", number] = clamp(S["CV Sum", number], Floor, Ceiling)
        S["Control Variable", number] = S["CV Sum", number]
        return 1
    }
}

function number pidSetCoefficient(S:table, Gains:string, Value)
{
    local MillisToSeconds = S["Sample Time", number] / 1000
    Gains = Gains:lower()
    switch (Gains)
    {
        case "kp",
        case "pidf coefficient kp",
        case "proportional",
            S["Proportional", number] = Value
            S["Internal P Gain", number] = S["Proportional", number] * S["Scale", number]
            return S["Proportional", number]
        break

        case "ki",
        case "pidf coefficient ki",
        case "integral",
            S["Integral", number] = Value
            S["Internal I Gain", number] = (S["Integral", number] * S["Scale", number]) * MillisToSeconds
            return S["Integral", number]
        break

        case "kd",
        case "pidf coefficient kd",
        case "derivative",
            S["Derivative", number] = Value
            S["Internal D Gain", number] = (S["Derivative", number] * S["Scale", number]) / MillisToSeconds
            return S["Derivative", number]
        break

        case "kf",
        case "pidf coefficient kf primary",
        case "primary feedforward",
            S["PIDF Coefficient Kf Primary", number] = Value
            S["Internal FF Primary", number] = S["PIDF Coefficient Kf Primary", number] / 100
            return S["PIDF Coefficient Kf Primary", number]
        break

        case "kf accel",
        case "pidf coefficient kf acceleration",
        case "acceleration feedforward",
            S["PIDF Coefficient Kf Acceleration", number] = Value 
            S["Internal FF Accel", number] = S["PIDF Coefficient Kf Acceleration", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Acceleration", number]
        break

        case "kf yaw rate",
        case "pidf coefficient kf yaw rate",
        case "yaw rate feedforward",
            S["PIDF Coefficient Kf Yaw Rate", number] = Value
            S["Internal FF Yaw Rate", number] = S["PIDF Coefficient Kf Yaw Rate", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Yaw Rate", number]
        break

        case "kf pit ang",
        case "pidf coefficient kf pitch angle",
        case "pitch angle feedforward",
            S["PIDF Coefficient Kf Pitch Angle", number] = Value
            S["Internal FF Pitch Angle", number] = S["PIDF Coefficient Kf Pitch Angle", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Pitch Angle", number]
        break

        case "kf hill climb/descent",
        case "pidf coefficient kf hill climb/descent",
        case "hill climb/descent feedforward",
            S["PIDF Coefficient Kf Hill Climb/Descent", number] = Value
            S["Internal FF Hill Climb/Descent", number] = S["PIDF Coefficient Kf Hill Climb/Descent", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Hill Climb/Descent", number]

        case "kf thr",
        case "pidf coefficient kf throttle",
        case "throttle feedforward",
            S["PIDF Coefficient Kf Throttle", number] = Value
            S["Internal FF Thr", number] = S["PIDF Coefficient Kf Throttle", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Throttle", number]
        break

        case "kf brk",
        case "pidf coefficient kf brake",
        case "brake feedforward",
            S["PIDF Coefficient Kf Brake", number] = Value
            S["Internal FF Brk", number] = S["PIDF Coefficient Kf Brake", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Brake", number]
        break

        default,
            return 0
        break
    }
}

function number pidSetPIDcoefficients(S:table, PtermGain, ItermGain, DtermGain)
{
    if (pidSetCoefficient(S, "proportional", PtermGain) == 0)
    {
        return 0
    }

    if (pidSetCoefficient(S, "integral", ItermGain) == 0)
    {
        return 0
    }

    if (pidSetCoefficient(S, "derivative", DtermGain) == 0)
    {
        return 0
    }

    return 1
}

function number pidSetFFcoefficients(S:table, FFaccel, FFyawRate, FFpitchAngle, FFthr, FFbrk)
{
    if (pidSetCoefficient(S, "acceleration feedforward", FFaccel) == 0)
    {
        return 0
    }

    if (pidSetCoefficient(S, "yaw rate feedforward", FFyawRate) == 0)
    {
        return 0
    }

    if (pidSetCoefficient(S, "pitch angle feedforward", FFpitchAngle) == 0)
    {
        return 0
    }

    if (pidSetCoefficient(S, "throttle feedforward", FFthr) == 0)
    {
        return 0
    }

    if (pidSetCoefficient(S, "brake feedforward", FFbrk) == 0)
    {
        return 0
    }

    return 1
}

function number pidSetFFcoefficients(S:table, FFmaster)
{
    if (pidSetCoefficient(S, "primary feedforward", FFmaster) == 0)
    {
        return 0
    }

    return 1
}

function number pidSetSampleTime(S:table, T)
{
    if (T <= 0)
    {
        return 0
    }

    local GetRatioedMotherfucker = T/S["Sample Time", number]
    local Ki = S["Internal I Gain", number]
    local Kd = S["Internal D Gain", number]

    Ki *= GetRatioedMotherfucker
    Kd /= GetRatioedMotherfucker

    S["Internal I Gain", number] = Ki
    S["Internal D Gain", number] = Kd
    S["Sample Time", number] = T

    return S["Sample Time", number]
}

function number pidInitialize(S:table)
{
    S["Last Process Variable", number] = S["Process Variable", number]
    S["Control Variable", number] = clamp(S["Control Variable", number], S["CV Floor", number], S["CV Ceiling", number])
    return 1
}

function number pidSetMode(S:table, M:string)
{
    M = M:lower()
    switch(M)
    {
        case "manual",
            S["Mode", number] = 0
            return 1
        break

        case "automatic",
            if (S["Mode", number] == 0)
            {
                pidInitialize(S)
            }
            S["Mode", number] = 1
            return 1
        break

        default,
            return 0
        break
    }
}

# PIDF Controller Inputs:
function void pidSetFeedforward(S:table, FFname:string, Value)
{
    local FeedForwardSum = 0

    FFname = FFname:lower()
    switch (FFname)
    {
        case "acceleration",
            S["FF Accel", number] = S["Internal FF Accel", number] * Value
        break

        case "brake",
            S["FF Brk", number] = S["Internal FF Brk", number] * Value
        break

        case "pitch angle",
            S["FF Pit Ang", number] = S["Internal FF Pit Ang", number] * Value
        break

        case "throttle",
           S["FF Thr", number] = S["Internal FF Thr", number] * Value
        break

        case "yaw rate",
            S["FF Yaw Rate", number] = S["Internal FF Yaw Rate", number] * Value
        break

        case "hill climb/descent",
            S["FF Hill Climb/Descent", number] = S["Internal FF Hill Climb/Descent", number] * Value
        break
    }

    FeedForwardSum += S["FF Accel", number]
    FeedForwardSum += S["FF Brk", number]
    FeedForwardSum += S["FF Pit Ang", number]
    FeedForwardSum += S["FF Thr", number]
    FeedForwardSum += S["FF Yaw Rate", number]
    FeedForwardSum += S["FF Hill Climb/Descent", number]

    if (S["Use Feedforward Limit", number] != 0)
    {
        FeedForwardSum = clamp(FeedForwardSum, S["Feedforward Limit Min", number], S["Feedforward Limit Max", number])
    }

    S["FF Sum", number] = FeedForwardSum * S["Internal FF Primary", number]

}

# This function sets the hill climb & descent feedforward.
# This is based on the gradient of the track, the locomotive's speed, the locomotive's direction, & the set point.
# The hill climb & descent feedforward is only applied when the gradient is greater than 0.5%.
# This is to prevent the feedforward from being applied when the locomotive is on a flat section of track.
function void pidSetHillClimbDescentFeedforward(S:table, HillClimbDescentData:array)
{
    local Speed = HillClimbDescentData[1, number]
    local Gradient = HillClimbDescentData[2, number]
    local Direction = HillClimbDescentData[3, number]
    local SetPoint = HillClimbDescentData[4, number]
    local HillClimbDescentFF = 0

    if (abs(Gradient) > 0.5)
    {
        # First off, calculate a value using the set point & the locomotive's speed.
        # This value is used to scale the hill climb & descent feedforward to the locomotive's speed.
        local SetPointSpeedCompensation = 1
        if (Gradient > 0)
        {
            if (Direction == 1)
            {
                if (SetPoint == 0 & Speed >= 0)
                {
                    if (Speed == 0)
                    {
                        # Avoid division by zero.
                        SetPointSpeedCompensation = 0
                    }
                    else
                    {
                        # Locomotive is stopping & going uphill.
                        SetPointSpeedCompensation = 0.1 / Speed
                    }
                }
                else
                {
                    if (Speed == 0)
                    {
                        # Avoid division by zero.
                        SetPointSpeedCompensation = 0
                    }
                    else
                    {
                        # Locomotive is going forward & going uphill.
                        SetPointSpeedCompensation = SetPoint / Speed
                    }
                }
            }
            elseif (Direction == -1)
            {
                if (SetPoint == 0 & Speed > 0)
                {
                    # Locomotive is stopping & going downhill.
                    SetPointSpeedCompensation = Speed / 0.1
                }
                else
                {
                    if (SetPoint == 0)
                    {
                        # Avoid division by zero.
                        SetPointSpeedCompensation = 0
                    }
                    else
                    {
                        # Locomotive is reversing & going downhill.
                        SetPointSpeedCompensation = Speed / SetPoint
                    }
                }
            }
        }
        else
        {
            if (Direction == 1)
            {
                if (SetPoint == 0 & Speed > 0)
                {
                    # Locomotive is stopping & going downhill.
                    SetPointSpeedCompensation = Speed / 0.1
                }
                else
                {
                    if (SetPoint == 0)
                    {
                        # Avoid division by zero.
                        SetPointSpeedCompensation = 0
                    }
                    else
                    {
                        # Locomotive is going forward & going downhill.
                        SetPointSpeedCompensation = Speed / SetPoint
                    }
                }
            }
            elseif (Direction == -1)
            {
                if (SetPoint == 0 & Speed >= 0)
                {
                    if (Speed == 0)
                    {
                        # Avoid division by zero.
                        SetPointSpeedCompensation = 0
                    }
                    else
                    {
                        # Locomotive is stopping & going uphill.
                        SetPointSpeedCompensation = 0.1 / Speed
                    }
                }
                else
                {
                    if (Speed == 0)
                    {
                        # Avoid division by zero.
                        SetPointSpeedCompensation = 0
                    }
                    else
                    {
                        # Locomotive is reversing & going uphill.
                        SetPointSpeedCompensation = SetPoint / Speed
                    }
                }
            }
        }

        # Now, calculate the hill climb & descent feedforward.
        HillClimbDescentFF = (Gradient * SetPointSpeedCompensation) * Direction
    }

    pidSetFeedforward(S, "hill climb/descent", HillClimbDescentFF)
}

# Temporary placement of I Term Relax function, until I can decide to yeet it later.
# Yes, I took this function from RotorFlight & adapted it to RailDriver.
# If you would like to check out RotorFlight, visit their GitHub.
function number pidSetItermRelax(S:table, Iterm, ItermErrorRate, ProcessVariable, SetPoint)
{
    local ItermRelaxFactor = max(0, 1.0 - SetPoint / S["I-Term Relax Threshold", number])

    if (((Iterm > 0) & (ItermErrorRate < 0)) | ((Iterm < 0) & (ItermErrorRate > 0)))
    {
        # I-Term is decreasing. No changes are necessary.
    }
    else
    {
        local ItermRelaxType = S["I-Term Relax Type", string]:lower()
        switch (ItermRelaxType)
        {
            case "set point",
                ItermErrorRate *= ItermRelaxFactor
            break
        }
    }

    return ItermErrorRate
}

# This function sets the process variable, which is the input to the PIDF controller.
function void pidSetProcessVariable(S:table, Value)
{
    S["Process Variable", number] = Value
}

# This function sets the set point, which is the desired output of the PIDF controller.
function void pidSetSetPoint(S:table, Value)
{
    S["Set Point", number] = Value
}

# This function sets the control variable, which is the output of the PIDF controller.
function void pidSetOutput(S:table, Value)
{
    S["Control Variable", number] = Value
}

# This function sets the direction of the control variable.
function void pidSetDirection(S:table, Value)
{
    S["Direction", number] = Value
}

function number pidCalculate(S:table)
{
    # PID Controller can have several operating modes.
    # These modes can include, but aren't limited to:
    #   > Manual Mode.
    #       In this mode, all PID tunings are set extremely low, so that the control loop is only correcting for residual disturbances.
    #       Feedforward is heavily manipulated in order to provide you with a traditional locomotive engineering experience.
    #       If you're experienced with Garry's Mod Train Build & train simulators in general, use this mode.
    #   > Throttle Mode.
    #       This is similar to Manual Mode. But, with a twist.
    #       Instead of controlling torque, you're controlling how quickly/slowly the locomotive will accelerate or decelerate to your
    #       desired speed.
    #       The higher you set your throttle, the faster the locomotive will accelerate.
    #       Deceleration is controlled by operating the brake lever. Again, this is similar to traditional braking.
    #       Speed is only held when both the throttle & brake levers are in their neutral positions.
    #       I-Term Decay is heavily leveraged in this mode to prevent the locomotive from rolling backwards & winding up the control
    #       loop.
    #   > Speed Hold Mode.
    #       This mode can be thought of as Cruise Control, as it is the most simplest & most beginner/user-friendly mode.
    #       Use this mode if you're new to Garry's Mod Train Build or you just want to quickly get on the tracks & run without any
    #       hassles.
    #       Your throttle lever is controlling what speed your locomotive will travel at, instead of controlling torque or acceleration.
    #       To increase speed, simply move the throttle lever up one notch & leave it there.
    #       To decrease speed, simply move the throttle lever down one notch & leave it there.
    #       To stop completely, simply move the throttle lever to its neutral position.
    #       The Control Loop will do all of the heavy lifting for you & it will keep the locomotive locked to your desired speed,
    #       regardless of the railroad conditions.
    #       Climbing or descending hills? Not a problem!
    #       Going around corners? Not a problem!
    #       Doing a coupler approach at a slow speed? Not a problem!
    # 
    # Keep in mind that the speed settings in Speed Hold Mode are dependent on what map you're driving on.
    # In any mode, you will not be allowed to drive faster than the posted line speed limit.
    # There are legit safety checks in RailDriver that prevent you from doing this.
    # The control loop is also supervised by an observer that monitors the performance of the PID controller itself.
    # The observer will enact safety protocols on a case-by-case basis, if something goes awry.

    if (S["Mode", number] == 0)
    {
        # Return false when the control loop has stopped running.
        return 0
    }

    local Now = millis()
    local TimeDelta = Now - S["Last Time", number]

    # PID needs a lot of processing power for its real-time requirements.
    if (TimeDelta >= S["Sample Time", number])
    {
        # Calculate Error from Set Point & Process Variable delta.
        local Error = S["Set Point", number] - S["Process Variable", number]
        local ITermError = S["Set Point", number] - S["Process Variable", number]

        # Calculate I Term Decay.
        if (S["Use I-Term Decay", number] != 0 & S["I-Term Decay Rate", number] > 0)
        {
            if (S["Process Variable", number] <= (S["I-Term Decay Threshold", number] - S["I-Term Decay Hysteresis", number]) & S["Set Point", number] == 0)
            {
                S["I-Term", number] = S["I-Term", number] - (S["I-Term", number] * S["I-Term Decay Rate", number])
            }
        }

        # Calculate I Term Relax
        if (S["Use I-Term Relax", number] != 0)
        {
            # Calculate I Term Error Rate.
            local ItermErrorRate = (ITermError - S["Last Error", number]) / TimeDelta

            # Calculate I Term Relax.
            ItermErrorRate = pidSetItermRelax(S, S["I-Term", number], ItermErrorRate, S["Process Variable", number], S["Set Point", number])

            # Calculate I Term.
            S["I-Term", number] = S["I-Term", number] + (ItermErrorRate * TimeDelta)
        }

        # Calculate I-Term.
        local PVdelta = S["Process Variable", number] - S["Last Process Variable", number]
        S["I-Term", number] = S["I-Term", number] + (S["Internal I Gain", number] * ITermError)

        #[
            Notes from ZZ Cat:
            RailDriver's PID controller is a bit different from most other PID controllers.
            First off, RailDriver's PID controller is a PIDF controller, which means that it has a Feedforward component
            to supplement the rest of the controller.
            The Feedforward component is a sum of the following:
                > Throttle Position - This is the throttle lever position.
                > Brake Position - This is the brake lever position.
                > Hill Climb & Hill Descent - This is the hill climb & hill descent components.
                    It is based on the current speed of the locomotive, the current gradient of the track, & the current
                    direction of travel.
                    The hill climb & hill descent components are only active when the locomotive is moving & the gradient is
                    greater than 0.5%.
                > Cornering - This is the cornering component.
                    It is based on the current speed of the locomotive & the locomotive's rate of turn.
                    The cornering component is only active when the locomotive is moving
                    & the rate of turn is greater than 0.5Â°/s.
                > Acceleration - This is the acceleration component.
                    It is based on the locomotive's rate of acceleration.
                    The acceleration component is only active when the locomotive is moving & the rate of acceleration is
                    greater than 0.5 m/sÂ².
            Each of these components are multiplied by their respective gain values & then summed together, & then multiplied
            by a final gain value. The final gain value is a percentage of the total output of the PIDF controller - IE the
            control variable.

            RailDriver's PID controller has two methods of calculating the P-Term.
            The first method is the traditional method, which is based on the error between the set point & the
            process variable. This is called Proportional on Error.
            The second method is based on the process variable delta & the I-Term. This is called Proportional on
            Measurement.
            Proportional on Error reacts faster to changes in the process variable, but it is more susceptible to
            oscillation. Thus, it is less accurate & less stable.
            Proportional on Measurement reacts slower to changes in the process variable, but it is less susceptible to
            oscillation. Thus, it is more accurate & stable.
            RailDriver's PID controller uses a weighted average of the two methods to calculate the P-Term.
            The weighting is based on the I-Term & the I-Term's rate of change. Proportional on Error is used when the
            I-Term is high & the I-Term's rate of change is high. Proportional on Measurement is used when the I-Term is
            low & the I-Term's rate of change is low.

            RailDriver's PID controller has an I-Term decay.
            The I-Term decay is used to gradually reduce the I-Term to zero when the locomotive is slowing down to a stop.
            This prevents the locomotive from overshooting its target speed when it is slowing down to a stop.
            The I-Term decay is based on the I-Term & the I-Term decay rate. The I-Term decay is only active when the
            set point is zero & the process variable is less than the I-Term decay threshold.

            RailDriver's PID controller has a slew rate limiter.
            The slew rate limiter is used to limit the rate of change of the control variable.
            The slew rate limiter is based on the control variable delta & the time delta.
            This is to help prevent the locomotive from jerking around & to help control the locomotive's acceleration &
            deceleration. The slew rate limiter is only active when the locomotive is moving & the control variable delta is
            greater than 0.5%.
        ]#

        # Calculate the I-Term's rate of change.
        local ITermDelta = S["I-Term", number] - S["Last I-Term", number]

        # Calculate the Proportional on Error component.
        local PTermError = S["Internal P Gain", number] * Error

        # Calculate the Proportional on Measurement component.
        local PTermMeasurement = S["Internal P Gain", number] * PVdelta

        # Use a weighted average of the two methods to calculate the P-Term using the I-Term & the I-Term's rate of change.
        # The weighting is based on the I-Term & the I-Term's rate of change.
        # Proportional on Error is used when the I-Term is high & the I-Term's rate of change is high.
        # Proportional on Measurement is used when the I-Term is low & the I-Term's rate of change is low.
        local ITermWeightPonE = abs((S["I-Term", number] / S["I-Term Limit Max", number]) * (ITermDelta / S["I-Term Limit Max", number]))
        local ITermWeightPonM = 1 - ITermWeightPonE
        S["P-Term", number] = (PTermError * ITermWeightPonE) + (PTermMeasurement * ITermWeightPonM)
        S["I-Term", number] = S["I-Term", number] - (PTermMeasurement * ITermWeightPonM)

        # Calculate & apply I-Term Limit.
        # This limits the buildup of Integral, to help stave off windup.
        if (S["Use I-Term Limit", number] != 0)
        {
            S["I-Term", number] = clamp(S["I-Term", number], S["I-Term Limit Min", number], S["I-Term Limit Max", number])
        }

        # Calculate D-Term.
        S["D-Term", number] = S["Internal D Gain", number] * (PVdelta / TimeDelta)

        # Calculate Control Variable.
        S["CV Sum", number] = S["P-Term", number] + S["I-Term", number] + S["D-Term", number] + S["FF Sum", number]

        # Apply a limit to the Control Variable.
        S["CV Sum", number] = clamp(S["CV Sum", number], S["CV Floor", number], S["CV Ceiling", number])
        S["Control Variable", number] = S["CV Sum", number] * S["Direction", number]

        # Store a couple of variables for use in the next execution.
        S["Last Error", number] = Error
        S["Last I-Term", number] = S["I-Term", number]
        S["Last Process Variable", number] = S["Process Variable", number]
        S["Last Time", number] = Now

    }

    # Return true when the control loop is running.
    return 1
}

# This function returns the current value of the Control Variable.
function number pidGetOutput(S:table)
{
    return S["Control Variable", number]
}

# This function returns the current value of the P-Term.
function number pidGetPterm(S:table)
{
    return S["P-Term", number]
}

# This function returns the current value of the I-Term.
function number pidGetIterm(S:table)
{
    return S["I-Term", number]
}

# This function returns the current value of the D-Term.
function number pidGetDterm(S:table)
{
    return S["D-Term", number]
}

# This function returns the current value of the hill climb/descent feedforward.
function number pidGetFFhillClimbDescent(S:table)
{
    return S["FF Hill Climb/Descent", number]
}

# This function returns the current value of the Feedforward Sum.
function number pidGetFFsum(S:table)
{
    return S["FF Sum", number]
}

# This function returns the current value of the Set Point.
function number pidGetSetPoint(S:table)
{
    return S["Set Point", number]
}

# This function returns the current value of the Process Variable.
function number pidGetProcessVariable(S:table)
{
    return S["Process Variable", number]
}
