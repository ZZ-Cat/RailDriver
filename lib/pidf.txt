#[
    This file is a part of the RailDriver project.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.
]#

@name RailDriver/lib/pid
#include "e2shared/RailDriver/lib/timers"

function table pidCreateInstance()
{
    local S = table()
    S:clear()

    # Default properties:
    S["Sample Time", number] = ticksToMillis(1)
    S["Range", number] = 75000
    S["Scale", number] = 100
    S["Proportional", number] = 1012
    S["Integral", number] = 850
    S["Derivative", number] = 10
    S["Feed Forward", number] = 14
    S["Proportional Mode", number] = 0
    S["Direction", number] = 1
    S["Mode", number] = 1

    # Default CV properties:
    S["CV Floor", number] = -75000
    S["CV Ceiling", number] = 75000

    # Default I-Term limit properties:
    S["Use I-Term Limit", number] = 1
    S["I-Term Limit Max", number] = 75000
    S["I-Term Limit Min", number] = -75000

    # Default I-Term decay properties:
    S["Use I-Term Decay", number] = 1
    S["I-Term Decay Rate", number] = 0.01
    S["I-Term Decay Threshold", number] = 5.0
    S["I-Term Decay Hysteresis", number] = (1/100)*S["I-Term Decay Threshold", number]

    # Default I-Term Relax properties:
    S["Use I-Term Relax", number] = 0
    S["I-Term Relax Threshold", number] = 40.0
    S["I-Term Relax Type", string] = "Set Point"

    # Primary variables:
    S["Set Point", number] = 0
    S["Process Variable", number] = 0
    S["Control Variable", number] = 0

    # Feedforward Gains:
    S["PIDF Coefficient Kf Master", number] = 100
    S["PIDF Coefficient Kf Acceleration", number] = 0
    S["PIDF Coefficient Kf Yaw Rate", number] = 0
    S["PIDF Coefficient Kf Pitch Angle", number] = 0
    S["PIDF Coefficient Kf Throttle", number] = 0
    S["PIDF Coefficient Kf Brake", number] = 0

    # Feedforward Limits:
    S["Use Feedforward Limit", number] = 1
    S["Feedforward Limit Max", number] = 75000
    S["Feedforward Limit Min", number] = -75000

    # Internal Gains:
    S["Internal P Gain", number] = 0
    S["Internal I Gain", number] = 0
    S["Internal D Gain", number] = 0
    S["Internal FF Master", number] = 1.0
    S["Internal FF Accel", number] = 0
    S["Internal FF Yaw Rate", number] = 0
    S["Internal FF Pit Ang", number] = 0
    S["Internal FF Thr", number] = 0
    S["Internal FF Brk", number] = 0

    # Last known variables:
    S["Last Time", number] = 0
    S["Last Process Variable", number] = 0

    # Control Variable summing bus:
    S["P-Term", number] = 0
    S["I-Term", number] = 0
    S["D-Term", number] = 0
    S["FF Accel", number] = 0
    S["FF Yaw Rate", number] = 0
    S["FF Pit Ang", number] = 0
    S["FF Thr", number] = 0
    S["FF Brk", number] = 0
    S["FF Sum", number] = 0
    S["CV Sum", number] = 0

    # Return the PID table that was created.
    return S
}

function number pidSetItermDecay(S:table, Rate, Threshold, Hysteresis)
{
    S["I-Term Decay Rate", number] = Rate
    S["I-Term Decay Threshold", number] = Threshold
    S["I-Term Decay Hysteresis", number] = (Hysteresis/100) * S["I-Term Decay Threshold", number]
    return 1
}

function number pidSetItermLimits(S:table, Min, Max)
{
    if (Min > Max)
    {
        return 0
    }

    else
    {
        S["I-Term Limit Min", number] = Min
        S["I-Term Limit Max", number] = Max

        if (S["Use I-Term Limit", number] != 0)
        {
            S["I-Term", number] = clamp(S["I-Term", number], S["I-Term Limit Min", number], S["I-Term Limit Max", number])
        }

        return 1
    }
}

function number pidSetControlVariableLimits(S:table, Floor, Ceiling)
{
    if (Floor > Ceiling)
    {
        return 0
    }

    else
    {
        S["CV Floor", number] = Floor
        S["CV Ceiling", number] = Ceiling

        if (S["Mode", string] != "automatic")
        {
            return 0
        }

        S["Control Variable", number] = clamp(S["Control Variable", number], Floor, Ceiling)
        # S["CV Sum", number] = clamp(S["CV Sum", number], Floor, Ceiling)
        return 1
    }
}

function number pidSetProportionalMode(S:table, PMode:string)
{
    PMode:lower()
    switch (PMode)
    {
        case "error",
        case "proportional on error",
            S["Proportional Mode", number] = 0
            return 1
        break

        case "measure",
        case "measurement",
        case "proportional on measurement",
        case "proportional on measure",
            S["Proportional Mode", number] = 1
            return 1
        break

        default,
            return 0
        break
    }
}

function number pidSetCoefficients(S:table, Gains:string, Value)
{
    local MillisToSeconds = S["Sample Time", number] / 1000
    Gains:lower()
    switch (Gains)
    {
        case "kp",
        case "pidf coefficient kp",
        case "proportional",
            S["Proportional", number] = Value
            S["Internal P Gain", number] = S["Proportional", number] * S["Scale", number]
            return S["Proportional", number]
        break

        case "ki",
        case "pidf coefficient ki",
        case "integral",
            S["Integral", number] = Value
            S["Internal I Gain", number] = (S["Integral", number] * S["Scale", number]) * MillisToSeconds
            return S["Integral", number]
        break

        case "kd",
        case "pidf coefficient kd",
        case "derivative",
            S["Derivative", number] = Value
            S["Internal D Gain", number] = (S["Derivative", number] * S["Scale", number]) / MillisToSeconds
            return S["Derivative", number]
        break

        case "kf",
        case "pidf coefficient kf master",
        case "master feedforward",
            S["PIDF Coefficient Kf Master", number] = Value
            S["Internal FF Master", number] = S["PIDF Coefficient Kf Master", number] / 100
            return S["PIDF Coefficient Kf Master", number]
        break

        case "kf accel",
        case "pidf coefficient kf acceleration",
        case "acceleration feedforward",
            S["PIDF Coefficient Kf Acceleration", number] = Value 
            S["Internal FF Accel", number] = S["PIDF Coefficient Kf Acceleration", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Acceleration", number]
        break

        case "kf yaw rate",
        case "pidf coefficient kf yaw rate",
        case "yaw rate feedforward",
            S["PIDF Coefficient Kf Yaw Rate", number] = Value
            S["Internal FF Yaw Rate", number] = S["PIDF Coefficient Kf Yaw Rate", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Yaw Rate", number]
        break

        case "kf pit ang",
        case "pidf coefficient kf pitch angle",
        case "pitch angle feedforward",
            S["PIDF Coefficient Kf Pitch Angle", number] = Value
            S["Internal FF Pitch Angle", number] = S["PIDF Coefficient Kf Pitch Angle", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Pitch Angle", number]
        break

        case "kf thr",
        case "pidf coefficient kf throttle",
        case "throttle feedforward",
            S["PIDF Coefficient Kf Throttle", number] = Value
            S["Internal FF Thr", number] = S["PIDF Coefficient Kf Throttle", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Throttle", number]
        break

        case "kf brk",
        case "pidf coefficient kf brake",
        case "brake feedforward",
            S["PIDF Coefficient Kf Brake", number] = Value
            S["Internal FF Brk", number] = S["PIDF Coefficient Kf Brake", number] * S["Scale", number]
            return S["PIDF Coefficient Kf Brake", number]
        break

        default,
            return 0
        break
    }
}

function number pidSetCoefficients(S:table, PtermGain, ItermGain, DtermGain)
{
    if (pidSetCoefficients(S, "proportional", PtermGain) == 0)
    {
        return 0
    }

    if (pidSetCoefficients(S, "integral", ItermGain) == 0)
    {
        return 0
    }

    if (pidSetCoefficients(S, "derivative", DtermGain) == 0)
    {
        return 0
    }

    return 1
}

function number pidSetCoefficients(S:table, FFaccel, FFyawRate, FFpitchAngle, FFthr, FFbrk)
{
    if (pidSetCoefficients(S, "acceleration feedforward", FFaccel) == 0)
    {
        return 0
    }

    if (pidSetCoefficients(S, "yaw rate feedforward", FFyawRate) == 0)
    {
        return 0
    }

    if (pidSetCoefficients(S, "pitch angle feedforward", FFpitchAngle) == 0)
    {
        return 0
    }

    if (pidSetCoefficients(S, "throttle feedforward", FFthr) == 0)
    {
        return 0
    }

    if (pidSetCoefficients(S, "brake feedforward", FFbrk) == 0)
    {
        return 0
    }

    return 1
}

function number pidSetSampleTime(S:table, T)
{
    if (T <= 0)
    {
        return 0
    }

    local GetRatioedMotherfucker = T/S["Sample Time", number]
    local Ki = S["Internal I Gain", number]
    local Kd = S["Internal D Gain", number]

    Ki *= GetRatioedMotherfucker
    Kd /= GetRatioedMotherfucker

    S["Internal I Gain", number] = Ki
    S["Internal D Gain", number] = Kd
    S["Sample Time", number] = T

    return S["Sample Time", number]
}

function number pidInitialize(S:table)
{
    S["Last Process Variable", number] = S["Process Variable", number]
    S["Control Variable", number] = clamp(S["Control Variable", number], S["CV Floor", number], S["CV Ceiling", number])
    return 1
}

function number pidSetMode(S:table, M:string)
{
    M:lower()
    switch(M)
    {
        case "manual",
            S["Mode", number] = 0
            return 1
        break

        case "automatic",
            if (S["Mode", number] == 0)
            {
                pidInitialize(S)
            }
            S["Mode", number] = 1
            return 1
        break

        default,
            return 0
        break
    }
}

# PIDF Controller Inputs:
function void pidSetFeedforward(S:table, FFname:string, Value)
{
    local FeedForwardSum = 0

    FFname:lower()
    switch (FFname)
    {
        case "acceleration",
            S["FF Accel", number] = S["Internal FF Accel", number] * Value
        break

        case "brake",
            S["FF Brk", number] = S["Internal FF Brk", number] * Value
        break

        case "pitch angle",
            S["FF Pit Ang", number] = S["Internal FF Pit Ang", number] * Value
        break

        case "throttle",
           S["FF Thr", number] = S["Internal FF Thr", number] * Value
        break

        case "yaw rate",
            S["FF Yaw Rate", number] = S["Internal FF Yaw Rate", number] * Value
        break
    }

    FeedForwardSum += S["FF Accel", number]
    FeedForwardSum += S["FF Brk", number]
    FeedForwardSum += S["FF Pit Ang", number]
    FeedForwardSum += S["FF Thr", number]
    FeedForwardSum += S["FF Yaw Rate", number]

    if (S["Use Feedforward Limit", number] != 0)
    {
        FeedForwardSum = clamp(FeedForwardSum, S["Feedforward Limit Min", number], S["Feedforward Limit Max", number])
    }

    S["FF Sum", number] = FeedForwardSum * S["Internal FF Master", number]

}

# Temporary placement of I Term Relax function, until I can decide to yeet it later.
# Yes, I took this function from RotorFlight & adapted it to RailDriver.
# If you would like to check out RotorFlight, visit their GitHub.
function number pidSetItermRelax(S:table, Iterm, ItermErrorRate, ProcessVariable, SetPoint)
{
    local ItermRelaxFactor = max(0, 1.0 - SetPoint / S["I-Term Relax Threshold", number])

    if (((Iterm > 0) & (ItermErrorRate < 0)) | ((Iterm < 0) & (ItermErrorRate > 0)))
    {
        # I-Term is decreasing. No changes are necessary.
    }
    else
    {
        local ItermRelaxType = S["I-Term Relax Type", string]:lower()
        switch (ItermRelaxType)
        {
            case "set point",
                ItermErrorRate *= ItermRelaxFactor
            break
        }
    }

    return ItermErrorRate
}

function number pidUpdate(S:table)
{
    # PID Controller can have several operating modes.
    # These modes can include, but aren't limited to:
    #   > Manual Mode.
    #       In this mode, all PID tunings are set extremely low, so that the control loop is only correcting for residual disturbances.
    #       Feedforward is heavily manipulated in order to provide you with a traditional locomotive engineering experience.
    #       If you're experienced with Garry's Mod Train Build & train simulators in general, use this mode.
    #   > Throttle Mode.
    #       This is similar to Manual Mode. But, with a twist.
    #       Instead of controlling torque, you're controlling how quickly/slowly the locomotive will accelerate or decelerate to your
    #       desired speed.
    #       The higher you set your throttle, the faster the locomotive will accelerate.
    #       Deceleration is controlled by operating the brake lever. Again, this is similar to traditional braking.
    #       Speed is only held when both the throttle & brake levers are in their neutral positions.
    #       I-Term Decay is heavily leveraged in this mode to prevent the locomotive from rolling backwards & winding up the control
    #       loop.
    #   > Speed Hold Mode.
    #       This mode can be thought of as Cruise Control, as it is the most simplest & most beginner/user-friendly mode.
    #       Use this mode if you're new to Garry's Mod Train Build or you just want to quickly get on the tracks & run without any
    #       hassles.
    #       Your throttle lever is controlling what speed your locomotive will travel at, instead of controlling torque or acceleration.
    #       To increase speed, simply move the throttle lever up one notch & leave it there.
    #       To decrease speed, simply move the throttle lever down one notch & leave it there.
    #       To stop completely, simply move the throttle lever to its neutral position.
    #       The Control Loop will do all of the heavy lifting for you & it will keep the locomotive locked to your desired speed,
    #       regardless of the railroad conditions.
    #       Climbing or descending hills? Not a problem!
    #       Going around corners? Not a problem!
    #       Doing a coupler approach at a slow speed? Not a problem!
    # 
    # Keep in mind that the speed settings in Speed Hold Mode are dependent on what map you're driving on.
    # In any mode, you will not be allowed to drive faster than the posted line speed limit.
    # There are legit safety checks in RailDriver that prevent you from doing this.
    # The control loop is also supervised by an observer that monitors the performance of the PID controller itself.
    # The observer will enact safety protocols on a case-by-case basis, if something goes awry.

    if (S["Mode", number] == 0)
    {
        # Return false when the control loop has stopped running.
        return 0
    }

    local Now = millis()
    local TimeDelta = Now - S["Last Time", number]

    # PID needs a lot of processing power for its real-time requirements.
    if (TimeDelta >= S["Sample Time", number])
    {
        # Calculate Error from Set Point & Process Variable delta.
        local Error = S["Set Point", number] - S["Process Variable", number]
        local ITermError = S["Set Point", number] - S["Process Variable", number]

        # Calculate I Term Decay.
        if (S["Use I-Term Decay", number] != 0 & S["I-Term Decay Rate", number] > 0)
        {
            if (S["Process Variable", number] <= (S["I-Term Decay Threshold", number] - S["I-Term Decay Hysteresis", number]) & S["Set Point", number] == 0)
            {
                S["I-Term", number] = S["I-Term", number] - (S["I-Term", number] * S["I-Term Decay Rate", number])
            }
        }

        # Calculate I Term Relax
        if (S["Use I-Term Relax", number] != 0)
        {
            ITermError = pidSetItermRelax(S["I-Term", number], ITermError, S["Process Variable", number], S["Set Point", number])
            Error = ITermError
        }

        # Calculate I-Term.
        local PVdelta = S["Process Variable", number] - S["Last Process Variable", number]
        S["I-Term", number] = S["I-Term", number] + (S["Internal I Gain", number] * Error)

        # Calculate Proportional on Measurement, if specified.
        if (S["Proportional Mode", number] == 1)
        {
            S["P-Term", number] = S["Internal P Gain", number] * PVdelta
            S["I-Term", number] = S["I-Term", number] - S["P-Term", number]
        }

        # Calculate & apply I-Term Limit.
        # This limits the buildup of Integral, to help stave off windup.
        if (S["Use I-Term Limit", number] != 0)
        {
            S["I-Term", number] = clamp(S["I-Term", number], S["I-Term Limit Min", number], S["I-Term Limit Max", number])
        }

        # Calculate Proportional on Error, if specified.
        if (S["Proportional Mode", number] == 0)
        {
            S["P-Term", number] = S["Internal P Gain", number] * Error
            S["CV Sum", number] = S["P-Term", number]
        }

        else
        {
            S["CV Sum", number] = 0
        }

        # Calculate D-Term.
        S["D-Term", number] = S["I-Term", number] - S["Internal D Gain", number] * PVdelta
        S["CV Sum", number] = S["CV Sum", number] + S["D-Term", number]

        # Apply feedforward to the Control Variable Summing Bus.
        # NB: Feedforward is calculated elsewhere.
        S["CV Sum", number] = S["CV Sum", number] + S["FF Sum", number]

        # Apply a limit to the Control Variable.
        S["CV Sum", number] = clamp(S["CV Sum", number], S["CV Floor", number], S["CV Ceiling", number])
        S["Control Variable", number] = S["CV Sum", number]

        # Store a couple of variables for use in the next execution.
        S["Last Process Variable", number] = S["Process Variable", number]
        S["Last Time", number] = Now

    }

    # Return true when the control loop is running.
    return 1
}
