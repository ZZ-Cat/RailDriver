#[
    RailDriver. Smart Locomotive Control script for Garry's Mod Train Build Servers.
    Copyright Â© 2022, Cassandra "ZZ Cat" Robinson. All rights reserved.

    This E2 script is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This E2 script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this E2 script.  If not, see <https://www.gnu.org/licenses/>.
]#

@name RailDriver
@model models/beer/wiremod/gate_e2_nano.mdl
@persist Trucks:array
@persist Speedo:table SpeedRaw
@strict

if (first() | duped())
{
    #include "e2shared/RailDriver/lib/smartEntityManagement"
    #include "e2shared/RailDriver/lib/sensors/speedometer"
    #include "e2shared/RailDriver/lib/pidf"

    try
    {
        # Initialize Smart Entity Management library.
        if(!semInit())
        {
            error("Failed to initialize Smart Entity Management library.")
        }

        # Lock E2 so it can't be edited by other players in multiplayer mode.
        # This prevents players from accidentally breaking the E2.
        if (!semLockE2())
        {
            error("Failed to lock E2.")
        }

        # Parent E2 to the locomotive so it moves with the locomotive.
        if (!semSmartParentE2toLocoBody())
        {
            error("Could not find a valid locomotive body to parent to.")
        }

        # Find all the trucks on the locomotive.
        Trucks = semFindTrucks()
        if (Trucks:count() < 2)
        {
            error("Could not find any trucks on the locomotive.")
        }

        # Check that the trucks are valid physics objects.
        for (I = 1, Trucks:count())
        {
            # Use an alternative version, to prevent false positives.
            if (Trucks[I, entity] == noentity())
            {
                error("Truck " + I + " is not a valid physics object.")
            }
        }

        # Initialize, configure and start the speedometer.
        Speedo = speedometerInit(Trucks[1, entity], Trucks[2, entity])
        if (!Speedo)
        {
            error("Failed to initialize speedometer.")
        }
        #speedometerSetUnits(Speedo, "mph")
        #speedometerSetSmoothing(Speedo, 0.5)
        speedometerStart(Speedo)

    }
    catch (Exception)
    {
        # If an error occurs, unlock the E2 so it can be edited again.
        # This prevents the E2 from being permanently locked.
        # This also prevents the E2 from being permanently parented to the locomotive.
        semUnlockE2()
        semSmartUnparentE2FromLocoBody()
        printColor(vec(255, 0, 0), "[RailDriver | Error]: ", vec(255, 255, 255), Exception)
    }
}

if (clk(speedoGetClockId(Speedo)))
{
    speedoClearAndRestartTimer(Speedo)
    SpeedRaw = speedoGetSpeed(Speedo, 1)
}

if (tickClk())
{
}
